
plane.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08004400  08004400  00014400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800443c  0800443c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800443c  0800443c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800443c  0800443c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800443c  0800443c  0001443c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004440  08004440  00014440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000014  08004458  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08004458  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b575  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001aa5  00000000  00000000  0002b5b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c68  00000000  00000000  0002d058  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b90  00000000  00000000  0002dcc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016f96  00000000  00000000  0002e850  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000094bd  00000000  00000000  000457e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008663f  00000000  00000000  0004eca3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d52e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003390  00000000  00000000  000d5360  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	080043e8 	.word	0x080043e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	080043e8 	.word	0x080043e8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08c      	sub	sp, #48	; 0x30
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f001 f841 	bl	80011d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f897 	bl	8000288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fa71 	bl	8000640 <MX_GPIO_Init>
  MX_SPI1_Init();
 800015e:	f000 f8d9 	bl	8000314 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000162:	f000 f90d 	bl	8000380 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000166:	f000 f9d1 	bl	800050c <MX_TIM2_Init>
  MX_TIM3_Init();
 800016a:	f000 fa1b 	bl	80005a4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Left aileron
 800016e:	2100      	movs	r1, #0
 8000170:	483e      	ldr	r0, [pc, #248]	; (800026c <main+0x120>)
 8000172:	f003 fa63 	bl	800363c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // Right aileron
 8000176:	2104      	movs	r1, #4
 8000178:	483c      	ldr	r0, [pc, #240]	; (800026c <main+0x120>)
 800017a:	f003 fa5f 	bl	800363c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // Elevator
 800017e:	2108      	movs	r1, #8
 8000180:	483a      	ldr	r0, [pc, #232]	; (800026c <main+0x120>)
 8000182:	f003 fa5b 	bl	800363c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // Rudder
 8000186:	210c      	movs	r1, #12
 8000188:	4838      	ldr	r0, [pc, #224]	; (800026c <main+0x120>)
 800018a:	f003 fa57 	bl	800363c <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim2); // 1 MHz timer
 800018e:	4838      	ldr	r0, [pc, #224]	; (8000270 <main+0x124>)
 8000190:	f003 f960 	bl	8003454 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3); // 1 Hz timer
 8000194:	4837      	ldr	r0, [pc, #220]	; (8000274 <main+0x128>)
 8000196:	f003 f9a7 	bl	80034e8 <HAL_TIM_Base_Start_IT>


  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800019a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800019e:	4836      	ldr	r0, [pc, #216]	; (8000278 <main+0x12c>)
 80001a0:	f001 fb94 	bl	80018cc <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80001a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001a8:	4833      	ldr	r0, [pc, #204]	; (8000278 <main+0x12c>)
 80001aa:	f001 fb8f 	bl	80018cc <HAL_GPIO_TogglePin>

  HAL_Delay(100);
 80001ae:	2064      	movs	r0, #100	; 0x64
 80001b0:	f001 f874 	bl	800129c <HAL_Delay>
  nrf24_reset();
 80001b4:	f000 fcaa 	bl	8000b0c <nrf24_reset>
  nrf24_init();
 80001b8:	f000 fc3c 	bl	8000a34 <nrf24_init>
  nrf24_set_rx_mode(CHANNEL, RX_ADDRESS, PIPE);
 80001bc:	2200      	movs	r2, #0
 80001be:	492f      	ldr	r1, [pc, #188]	; (800027c <main+0x130>)
 80001c0:	2001      	movs	r0, #1
 80001c2:	f000 fdd5 	bl	8000d70 <nrf24_set_rx_mode>
  NRF24_StateTypeDef state;
  nrf24_read_state(&state);
 80001c6:	1d3b      	adds	r3, r7, #4
 80001c8:	4618      	mov	r0, r3
 80001ca:	f000 fd33 	bl	8000c34 <nrf24_read_state>
  HAL_Delay(100);
 80001ce:	2064      	movs	r0, #100	; 0x64
 80001d0:	f001 f864 	bl	800129c <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	if (nrf24_receive(PIPE, (uint8_t*)rx_buffer, RX_SIZE)) {
 80001d4:	2220      	movs	r2, #32
 80001d6:	492a      	ldr	r1, [pc, #168]	; (8000280 <main+0x134>)
 80001d8:	2000      	movs	r0, #0
 80001da:	f000 fe3f 	bl	8000e5c <nrf24_receive>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d004      	beq.n	80001ee <main+0xa2>
  		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80001e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001e8:	4823      	ldr	r0, [pc, #140]	; (8000278 <main+0x12c>)
 80001ea:	f001 fb6f 	bl	80018cc <HAL_GPIO_TogglePin>
  	}

  	uint16_t rudder_trim = 100 * rx_buffer[RUDDER_TRIM]/200;
 80001ee:	4b24      	ldr	r3, [pc, #144]	; (8000280 <main+0x134>)
 80001f0:	895b      	ldrh	r3, [r3, #10]
 80001f2:	461a      	mov	r2, r3
 80001f4:	2364      	movs	r3, #100	; 0x64
 80001f6:	fb03 f302 	mul.w	r3, r3, r2
 80001fa:	4a22      	ldr	r2, [pc, #136]	; (8000284 <main+0x138>)
 80001fc:	fb82 1203 	smull	r1, r2, r2, r3
 8000200:	1192      	asrs	r2, r2, #6
 8000202:	17db      	asrs	r3, r3, #31
 8000204:	1ad3      	subs	r3, r2, r3
 8000206:	85fb      	strh	r3, [r7, #46]	; 0x2e
  	uint16_t elevator_trim = 100 * rx_buffer[ELEVATOR_TRIM]/200;
 8000208:	4b1d      	ldr	r3, [pc, #116]	; (8000280 <main+0x134>)
 800020a:	891b      	ldrh	r3, [r3, #8]
 800020c:	461a      	mov	r2, r3
 800020e:	2364      	movs	r3, #100	; 0x64
 8000210:	fb03 f302 	mul.w	r3, r3, r2
 8000214:	4a1b      	ldr	r2, [pc, #108]	; (8000284 <main+0x138>)
 8000216:	fb82 1203 	smull	r1, r2, r2, r3
 800021a:	1192      	asrs	r2, r2, #6
 800021c:	17db      	asrs	r3, r3, #31
 800021e:	1ad3      	subs	r3, r2, r3
 8000220:	85bb      	strh	r3, [r7, #44]	; 0x2c

  	SET_LEFT_AILERON(rx_buffer[0]/2);
 8000222:	4b17      	ldr	r3, [pc, #92]	; (8000280 <main+0x134>)
 8000224:	881b      	ldrh	r3, [r3, #0]
 8000226:	085b      	lsrs	r3, r3, #1
 8000228:	b29b      	uxth	r3, r3
 800022a:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 800022e:	4b0f      	ldr	r3, [pc, #60]	; (800026c <main+0x120>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	635a      	str	r2, [r3, #52]	; 0x34
  	SET_RIGHT_AILERON(rx_buffer[1]/2);
 8000234:	4b12      	ldr	r3, [pc, #72]	; (8000280 <main+0x134>)
 8000236:	885b      	ldrh	r3, [r3, #2]
 8000238:	085b      	lsrs	r3, r3, #1
 800023a:	b29b      	uxth	r3, r3
 800023c:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8000240:	4b0a      	ldr	r3, [pc, #40]	; (800026c <main+0x120>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	639a      	str	r2, [r3, #56]	; 0x38
  	SET_ELEVATOR(rx_buffer[2]/2);
 8000246:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <main+0x134>)
 8000248:	889b      	ldrh	r3, [r3, #4]
 800024a:	085b      	lsrs	r3, r3, #1
 800024c:	b29b      	uxth	r3, r3
 800024e:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8000252:	4b06      	ldr	r3, [pc, #24]	; (800026c <main+0x120>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	63da      	str	r2, [r3, #60]	; 0x3c
  	SET_RUDDER(rx_buffer[3]/2);
 8000258:	4b09      	ldr	r3, [pc, #36]	; (8000280 <main+0x134>)
 800025a:	88db      	ldrh	r3, [r3, #6]
 800025c:	085b      	lsrs	r3, r3, #1
 800025e:	b29b      	uxth	r3, r3
 8000260:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8000264:	4b01      	ldr	r3, [pc, #4]	; (800026c <main+0x120>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	641a      	str	r2, [r3, #64]	; 0x40
  {
 800026a:	e7b3      	b.n	80001d4 <main+0x88>
 800026c:	200000a4 	.word	0x200000a4
 8000270:	20000144 	.word	0x20000144
 8000274:	2000003c 	.word	0x2000003c
 8000278:	40011000 	.word	0x40011000
 800027c:	20000000 	.word	0x20000000
 8000280:	20000084 	.word	0x20000084
 8000284:	51eb851f 	.word	0x51eb851f

08000288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b090      	sub	sp, #64	; 0x40
 800028c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028e:	f107 0318 	add.w	r3, r7, #24
 8000292:	2228      	movs	r2, #40	; 0x28
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f004 f89e 	bl	80043d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]
 80002a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002aa:	2301      	movs	r3, #1
 80002ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b8:	2301      	movs	r3, #1
 80002ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002bc:	2302      	movs	r3, #2
 80002be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002c6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002cc:	f107 0318 	add.w	r3, r7, #24
 80002d0:	4618      	mov	r0, r3
 80002d2:	f001 fb15 	bl	8001900 <HAL_RCC_OscConfig>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002dc:	f000 fa86 	bl	80007ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e0:	230f      	movs	r3, #15
 80002e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e4:	2302      	movs	r3, #2
 80002e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e8:	2300      	movs	r3, #0
 80002ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2102      	movs	r1, #2
 80002fa:	4618      	mov	r0, r3
 80002fc:	f001 fd80 	bl	8001e00 <HAL_RCC_ClockConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000306:	f000 fa71 	bl	80007ec <Error_Handler>
  }
}
 800030a:	bf00      	nop
 800030c:	3740      	adds	r7, #64	; 0x40
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
	...

08000314 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000318:	4b17      	ldr	r3, [pc, #92]	; (8000378 <MX_SPI1_Init+0x64>)
 800031a:	4a18      	ldr	r2, [pc, #96]	; (800037c <MX_SPI1_Init+0x68>)
 800031c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800031e:	4b16      	ldr	r3, [pc, #88]	; (8000378 <MX_SPI1_Init+0x64>)
 8000320:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000324:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000326:	4b14      	ldr	r3, [pc, #80]	; (8000378 <MX_SPI1_Init+0x64>)
 8000328:	2200      	movs	r2, #0
 800032a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800032c:	4b12      	ldr	r3, [pc, #72]	; (8000378 <MX_SPI1_Init+0x64>)
 800032e:	2200      	movs	r2, #0
 8000330:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000332:	4b11      	ldr	r3, [pc, #68]	; (8000378 <MX_SPI1_Init+0x64>)
 8000334:	2200      	movs	r2, #0
 8000336:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000338:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <MX_SPI1_Init+0x64>)
 800033a:	2200      	movs	r2, #0
 800033c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800033e:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <MX_SPI1_Init+0x64>)
 8000340:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000344:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000346:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <MX_SPI1_Init+0x64>)
 8000348:	2210      	movs	r2, #16
 800034a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800034c:	4b0a      	ldr	r3, [pc, #40]	; (8000378 <MX_SPI1_Init+0x64>)
 800034e:	2200      	movs	r2, #0
 8000350:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000352:	4b09      	ldr	r3, [pc, #36]	; (8000378 <MX_SPI1_Init+0x64>)
 8000354:	2200      	movs	r2, #0
 8000356:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000358:	4b07      	ldr	r3, [pc, #28]	; (8000378 <MX_SPI1_Init+0x64>)
 800035a:	2200      	movs	r2, #0
 800035c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800035e:	4b06      	ldr	r3, [pc, #24]	; (8000378 <MX_SPI1_Init+0x64>)
 8000360:	220a      	movs	r2, #10
 8000362:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000364:	4804      	ldr	r0, [pc, #16]	; (8000378 <MX_SPI1_Init+0x64>)
 8000366:	f001 feb5 	bl	80020d4 <HAL_SPI_Init>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000370:	f000 fa3c 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	200000ec 	.word	0x200000ec
 800037c:	40013000 	.word	0x40013000

08000380 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b096      	sub	sp, #88	; 0x58
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000386:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000394:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
 800039c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800039e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]
 80003ac:	611a      	str	r2, [r3, #16]
 80003ae:	615a      	str	r2, [r3, #20]
 80003b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	2220      	movs	r2, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	4618      	mov	r0, r3
 80003ba:	f004 f80d 	bl	80043d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003be:	4b51      	ldr	r3, [pc, #324]	; (8000504 <MX_TIM1_Init+0x184>)
 80003c0:	4a51      	ldr	r2, [pc, #324]	; (8000508 <MX_TIM1_Init+0x188>)
 80003c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80003c4:	4b4f      	ldr	r3, [pc, #316]	; (8000504 <MX_TIM1_Init+0x184>)
 80003c6:	2247      	movs	r2, #71	; 0x47
 80003c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ca:	4b4e      	ldr	r3, [pc, #312]	; (8000504 <MX_TIM1_Init+0x184>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 80003d0:	4b4c      	ldr	r3, [pc, #304]	; (8000504 <MX_TIM1_Init+0x184>)
 80003d2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80003d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003d8:	4b4a      	ldr	r3, [pc, #296]	; (8000504 <MX_TIM1_Init+0x184>)
 80003da:	2200      	movs	r2, #0
 80003dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003de:	4b49      	ldr	r3, [pc, #292]	; (8000504 <MX_TIM1_Init+0x184>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003e4:	4b47      	ldr	r3, [pc, #284]	; (8000504 <MX_TIM1_Init+0x184>)
 80003e6:	2280      	movs	r2, #128	; 0x80
 80003e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003ea:	4846      	ldr	r0, [pc, #280]	; (8000504 <MX_TIM1_Init+0x184>)
 80003ec:	f002 ffe3 	bl	80033b6 <HAL_TIM_Base_Init>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80003f6:	f000 f9f9 	bl	80007ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000400:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000404:	4619      	mov	r1, r3
 8000406:	483f      	ldr	r0, [pc, #252]	; (8000504 <MX_TIM1_Init+0x184>)
 8000408:	f003 fb80 	bl	8003b0c <HAL_TIM_ConfigClockSource>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000412:	f000 f9eb 	bl	80007ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000416:	483b      	ldr	r0, [pc, #236]	; (8000504 <MX_TIM1_Init+0x184>)
 8000418:	f003 f8b8 	bl	800358c <HAL_TIM_PWM_Init>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000422:	f000 f9e3 	bl	80007ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000426:	2300      	movs	r3, #0
 8000428:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800042a:	2300      	movs	r3, #0
 800042c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800042e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000432:	4619      	mov	r1, r3
 8000434:	4833      	ldr	r0, [pc, #204]	; (8000504 <MX_TIM1_Init+0x184>)
 8000436:	f003 fee9 	bl	800420c <HAL_TIMEx_MasterConfigSynchronization>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000440:	f000 f9d4 	bl	80007ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000444:	2360      	movs	r3, #96	; 0x60
 8000446:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1500;
 8000448:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800044c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800044e:	2300      	movs	r3, #0
 8000450:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000452:	2300      	movs	r3, #0
 8000454:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000456:	2300      	movs	r3, #0
 8000458:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800045a:	2300      	movs	r3, #0
 800045c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800045e:	2300      	movs	r3, #0
 8000460:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000466:	2200      	movs	r2, #0
 8000468:	4619      	mov	r1, r3
 800046a:	4826      	ldr	r0, [pc, #152]	; (8000504 <MX_TIM1_Init+0x184>)
 800046c:	f003 fa90 	bl	8003990 <HAL_TIM_PWM_ConfigChannel>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000476:	f000 f9b9 	bl	80007ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800047a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800047e:	2204      	movs	r2, #4
 8000480:	4619      	mov	r1, r3
 8000482:	4820      	ldr	r0, [pc, #128]	; (8000504 <MX_TIM1_Init+0x184>)
 8000484:	f003 fa84 	bl	8003990 <HAL_TIM_PWM_ConfigChannel>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 800048e:	f000 f9ad 	bl	80007ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000496:	2208      	movs	r2, #8
 8000498:	4619      	mov	r1, r3
 800049a:	481a      	ldr	r0, [pc, #104]	; (8000504 <MX_TIM1_Init+0x184>)
 800049c:	f003 fa78 	bl	8003990 <HAL_TIM_PWM_ConfigChannel>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80004a6:	f000 f9a1 	bl	80007ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004ae:	220c      	movs	r2, #12
 80004b0:	4619      	mov	r1, r3
 80004b2:	4814      	ldr	r0, [pc, #80]	; (8000504 <MX_TIM1_Init+0x184>)
 80004b4:	f003 fa6c 	bl	8003990 <HAL_TIM_PWM_ConfigChannel>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80004be:	f000 f995 	bl	80007ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004c2:	2300      	movs	r3, #0
 80004c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004c6:	2300      	movs	r3, #0
 80004c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004ca:	2300      	movs	r3, #0
 80004cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004d2:	2300      	movs	r3, #0
 80004d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004dc:	2300      	movs	r3, #0
 80004de:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	4619      	mov	r1, r3
 80004e4:	4807      	ldr	r0, [pc, #28]	; (8000504 <MX_TIM1_Init+0x184>)
 80004e6:	f003 feef 	bl	80042c8 <HAL_TIMEx_ConfigBreakDeadTime>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 80004f0:	f000 f97c 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004f4:	4803      	ldr	r0, [pc, #12]	; (8000504 <MX_TIM1_Init+0x184>)
 80004f6:	f000 fdd3 	bl	80010a0 <HAL_TIM_MspPostInit>

}
 80004fa:	bf00      	nop
 80004fc:	3758      	adds	r7, #88	; 0x58
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	200000a4 	.word	0x200000a4
 8000508:	40012c00 	.word	0x40012c00

0800050c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000512:	f107 0308 	add.w	r3, r7, #8
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000520:	463b      	mov	r3, r7
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000528:	4b1d      	ldr	r3, [pc, #116]	; (80005a0 <MX_TIM2_Init+0x94>)
 800052a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800052e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000530:	4b1b      	ldr	r3, [pc, #108]	; (80005a0 <MX_TIM2_Init+0x94>)
 8000532:	2247      	movs	r2, #71	; 0x47
 8000534:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000536:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <MX_TIM2_Init+0x94>)
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 800053c:	4b18      	ldr	r3, [pc, #96]	; (80005a0 <MX_TIM2_Init+0x94>)
 800053e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000542:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000544:	4b16      	ldr	r3, [pc, #88]	; (80005a0 <MX_TIM2_Init+0x94>)
 8000546:	2200      	movs	r2, #0
 8000548:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800054a:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <MX_TIM2_Init+0x94>)
 800054c:	2200      	movs	r2, #0
 800054e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000550:	4813      	ldr	r0, [pc, #76]	; (80005a0 <MX_TIM2_Init+0x94>)
 8000552:	f002 ff30 	bl	80033b6 <HAL_TIM_Base_Init>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800055c:	f000 f946 	bl	80007ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000560:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000564:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000566:	f107 0308 	add.w	r3, r7, #8
 800056a:	4619      	mov	r1, r3
 800056c:	480c      	ldr	r0, [pc, #48]	; (80005a0 <MX_TIM2_Init+0x94>)
 800056e:	f003 facd 	bl	8003b0c <HAL_TIM_ConfigClockSource>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000578:	f000 f938 	bl	80007ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800057c:	2300      	movs	r3, #0
 800057e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000584:	463b      	mov	r3, r7
 8000586:	4619      	mov	r1, r3
 8000588:	4805      	ldr	r0, [pc, #20]	; (80005a0 <MX_TIM2_Init+0x94>)
 800058a:	f003 fe3f 	bl	800420c <HAL_TIMEx_MasterConfigSynchronization>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000594:	f000 f92a 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000598:	bf00      	nop
 800059a:	3718      	adds	r7, #24
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000144 	.word	0x20000144

080005a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005aa:	f107 0308 	add.w	r3, r7, #8
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005b8:	463b      	mov	r3, r7
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005c0:	4b1d      	ldr	r3, [pc, #116]	; (8000638 <MX_TIM3_Init+0x94>)
 80005c2:	4a1e      	ldr	r2, [pc, #120]	; (800063c <MX_TIM3_Init+0x98>)
 80005c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 80005c6:	4b1c      	ldr	r3, [pc, #112]	; (8000638 <MX_TIM3_Init+0x94>)
 80005c8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80005cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ce:	4b1a      	ldr	r3, [pc, #104]	; (8000638 <MX_TIM3_Init+0x94>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80005d4:	4b18      	ldr	r3, [pc, #96]	; (8000638 <MX_TIM3_Init+0x94>)
 80005d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005dc:	4b16      	ldr	r3, [pc, #88]	; (8000638 <MX_TIM3_Init+0x94>)
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <MX_TIM3_Init+0x94>)
 80005e4:	2280      	movs	r2, #128	; 0x80
 80005e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005e8:	4813      	ldr	r0, [pc, #76]	; (8000638 <MX_TIM3_Init+0x94>)
 80005ea:	f002 fee4 	bl	80033b6 <HAL_TIM_Base_Init>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80005f4:	f000 f8fa 	bl	80007ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005fe:	f107 0308 	add.w	r3, r7, #8
 8000602:	4619      	mov	r1, r3
 8000604:	480c      	ldr	r0, [pc, #48]	; (8000638 <MX_TIM3_Init+0x94>)
 8000606:	f003 fa81 	bl	8003b0c <HAL_TIM_ConfigClockSource>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000610:	f000 f8ec 	bl	80007ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000614:	2300      	movs	r3, #0
 8000616:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800061c:	463b      	mov	r3, r7
 800061e:	4619      	mov	r1, r3
 8000620:	4805      	ldr	r0, [pc, #20]	; (8000638 <MX_TIM3_Init+0x94>)
 8000622:	f003 fdf3 	bl	800420c <HAL_TIMEx_MasterConfigSynchronization>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800062c:	f000 f8de 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000630:	bf00      	nop
 8000632:	3718      	adds	r7, #24
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	2000003c 	.word	0x2000003c
 800063c:	40000400 	.word	0x40000400

08000640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000646:	f107 0310 	add.w	r3, r7, #16
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000654:	4b38      	ldr	r3, [pc, #224]	; (8000738 <MX_GPIO_Init+0xf8>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a37      	ldr	r2, [pc, #220]	; (8000738 <MX_GPIO_Init+0xf8>)
 800065a:	f043 0310 	orr.w	r3, r3, #16
 800065e:	6193      	str	r3, [r2, #24]
 8000660:	4b35      	ldr	r3, [pc, #212]	; (8000738 <MX_GPIO_Init+0xf8>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f003 0310 	and.w	r3, r3, #16
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800066c:	4b32      	ldr	r3, [pc, #200]	; (8000738 <MX_GPIO_Init+0xf8>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a31      	ldr	r2, [pc, #196]	; (8000738 <MX_GPIO_Init+0xf8>)
 8000672:	f043 0320 	orr.w	r3, r3, #32
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b2f      	ldr	r3, [pc, #188]	; (8000738 <MX_GPIO_Init+0xf8>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f003 0320 	and.w	r3, r3, #32
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000684:	4b2c      	ldr	r3, [pc, #176]	; (8000738 <MX_GPIO_Init+0xf8>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	4a2b      	ldr	r2, [pc, #172]	; (8000738 <MX_GPIO_Init+0xf8>)
 800068a:	f043 0304 	orr.w	r3, r3, #4
 800068e:	6193      	str	r3, [r2, #24]
 8000690:	4b29      	ldr	r3, [pc, #164]	; (8000738 <MX_GPIO_Init+0xf8>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	f003 0304 	and.w	r3, r3, #4
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069c:	4b26      	ldr	r3, [pc, #152]	; (8000738 <MX_GPIO_Init+0xf8>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	4a25      	ldr	r2, [pc, #148]	; (8000738 <MX_GPIO_Init+0xf8>)
 80006a2:	f043 0308 	orr.w	r3, r3, #8
 80006a6:	6193      	str	r3, [r2, #24]
 80006a8:	4b23      	ldr	r3, [pc, #140]	; (8000738 <MX_GPIO_Init+0xf8>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f003 0308 	and.w	r3, r3, #8
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ba:	4820      	ldr	r0, [pc, #128]	; (800073c <MX_GPIO_Init+0xfc>)
 80006bc:	f001 f8ee 	bl	800189c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2103      	movs	r1, #3
 80006c4:	481e      	ldr	r0, [pc, #120]	; (8000740 <MX_GPIO_Init+0x100>)
 80006c6:	f001 f8e9 	bl	800189c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STROBE_GPIO_Port, LED_STROBE_Pin, GPIO_PIN_SET);
 80006ca:	2201      	movs	r2, #1
 80006cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d0:	481b      	ldr	r0, [pc, #108]	; (8000740 <MX_GPIO_Init+0x100>)
 80006d2:	f001 f8e3 	bl	800189c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80006d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006dc:	2301      	movs	r3, #1
 80006de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	2302      	movs	r3, #2
 80006e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80006e8:	f107 0310 	add.w	r3, r7, #16
 80006ec:	4619      	mov	r1, r3
 80006ee:	4813      	ldr	r0, [pc, #76]	; (800073c <MX_GPIO_Init+0xfc>)
 80006f0:	f000 ff7a 	bl	80015e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF24_CE_Pin NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin|NRF24_CSN_Pin;
 80006f4:	2303      	movs	r3, #3
 80006f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000700:	2303      	movs	r3, #3
 8000702:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000704:	f107 0310 	add.w	r3, r7, #16
 8000708:	4619      	mov	r1, r3
 800070a:	480d      	ldr	r0, [pc, #52]	; (8000740 <MX_GPIO_Init+0x100>)
 800070c:	f000 ff6c 	bl	80015e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_STROBE_Pin */
  GPIO_InitStruct.Pin = LED_STROBE_Pin;
 8000710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000714:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000716:	2301      	movs	r3, #1
 8000718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071e:	2302      	movs	r3, #2
 8000720:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_STROBE_GPIO_Port, &GPIO_InitStruct);
 8000722:	f107 0310 	add.w	r3, r7, #16
 8000726:	4619      	mov	r1, r3
 8000728:	4805      	ldr	r0, [pc, #20]	; (8000740 <MX_GPIO_Init+0x100>)
 800072a:	f000 ff5d 	bl	80015e8 <HAL_GPIO_Init>

}
 800072e:	bf00      	nop
 8000730:	3720      	adds	r7, #32
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40021000 	.word	0x40021000
 800073c:	40011000 	.word	0x40011000
 8000740:	40010c00 	.word	0x40010c00

08000744 <HAL_TIM_PeriodElapsedCallback>:
uint32_t prev_count = 0;
uint8_t blink_flag = 1;
uint8_t blink_flag_2 = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	if (!(blink_counter % 11) || blink_flag) {
 800074c:	4b21      	ldr	r3, [pc, #132]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800074e:	6819      	ldr	r1, [r3, #0]
 8000750:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000752:	fba3 2301 	umull	r2, r3, r3, r1
 8000756:	08da      	lsrs	r2, r3, #3
 8000758:	4613      	mov	r3, r2
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	4413      	add	r3, r2
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	4413      	add	r3, r2
 8000762:	1aca      	subs	r2, r1, r3
 8000764:	2a00      	cmp	r2, #0
 8000766:	d003      	beq.n	8000770 <HAL_TIM_PeriodElapsedCallback+0x2c>
 8000768:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x98>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d010      	beq.n	8000792 <HAL_TIM_PeriodElapsedCallback+0x4e>
		HAL_GPIO_TogglePin(LED_STROBE_GPIO_Port, LED_STROBE_Pin);
 8000770:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000774:	481a      	ldr	r0, [pc, #104]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000776:	f001 f8a9 	bl	80018cc <HAL_GPIO_TogglePin>
		blink_flag ^= 1;
 800077a:	4b18      	ldr	r3, [pc, #96]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x98>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	f083 0301 	eor.w	r3, r3, #1
 8000782:	b2da      	uxtb	r2, r3
 8000784:	4b15      	ldr	r3, [pc, #84]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000786:	701a      	strb	r2, [r3, #0]
		prev_count = blink_counter;
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a15      	ldr	r2, [pc, #84]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800078e:	6013      	str	r3, [r2, #0]
 8000790:	e016      	b.n	80007c0 <HAL_TIM_PeriodElapsedCallback+0x7c>
	}
	else if (blink_counter - 1 == prev_count || blink_flag_2) {
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	1e5a      	subs	r2, r3, #1
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	429a      	cmp	r2, r3
 800079e:	d003      	beq.n	80007a8 <HAL_TIM_PeriodElapsedCallback+0x64>
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d00b      	beq.n	80007c0 <HAL_TIM_PeriodElapsedCallback+0x7c>
		HAL_GPIO_TogglePin(LED_STROBE_GPIO_Port, LED_STROBE_Pin);
 80007a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ac:	480c      	ldr	r0, [pc, #48]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80007ae:	f001 f88d 	bl	80018cc <HAL_GPIO_TogglePin>
		blink_flag_2 ^= 1;
 80007b2:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	f083 0301 	eor.w	r3, r3, #1
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80007be:	701a      	strb	r2, [r3, #0]
	}

	blink_counter++;
 80007c0:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	3301      	adds	r3, #1
 80007c6:	4a03      	ldr	r2, [pc, #12]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80007c8:	6013      	str	r3, [r2, #0]
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000030 	.word	0x20000030
 80007d8:	ba2e8ba3 	.word	0xba2e8ba3
 80007dc:	20000005 	.word	0x20000005
 80007e0:	40010c00 	.word	0x40010c00
 80007e4:	20000034 	.word	0x20000034
 80007e8:	20000038 	.word	0x20000038

080007ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <Error_Handler+0x6>

080007f4 <delay_us>:
 *
 * @note This function uses timer handle htim1, which is assumed to be
 * 1MHz and count until 65535.
 */
static inline void delay_us(uint16_t microseconds)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&TIMER_HANDLE_1MHZ, 0);
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <delay_us+0x2c>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&TIMER_HANDLE_1MHZ) < microseconds);
 8000806:	bf00      	nop
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <delay_us+0x2c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800080e:	88fb      	ldrh	r3, [r7, #6]
 8000810:	429a      	cmp	r2, r3
 8000812:	d3f9      	bcc.n	8000808 <delay_us+0x14>
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	20000144 	.word	0x20000144

08000824 <nrf24_set_CE_high>:

/**
 * @brief Sets CE high
 */
static inline void nrf24_set_CE_high()
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, 1);
 8000828:	2201      	movs	r2, #1
 800082a:	2101      	movs	r1, #1
 800082c:	4802      	ldr	r0, [pc, #8]	; (8000838 <nrf24_set_CE_high+0x14>)
 800082e:	f001 f835 	bl	800189c <HAL_GPIO_WritePin>
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40010c00 	.word	0x40010c00

0800083c <nrf24_set_CE_low>:

/**
 * @brief Sets CE low
 */
static inline void nrf24_set_CE_low()
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, 0);
 8000840:	2200      	movs	r2, #0
 8000842:	2101      	movs	r1, #1
 8000844:	4802      	ldr	r0, [pc, #8]	; (8000850 <nrf24_set_CE_low+0x14>)
 8000846:	f001 f829 	bl	800189c <HAL_GPIO_WritePin>
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40010c00 	.word	0x40010c00

08000854 <nrf24_set_CSN_high>:

/**
 * @brief Sets CSN high
 */
static inline void nrf24_set_CSN_high()
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, 1);
 8000858:	2201      	movs	r2, #1
 800085a:	2102      	movs	r1, #2
 800085c:	4802      	ldr	r0, [pc, #8]	; (8000868 <nrf24_set_CSN_high+0x14>)
 800085e:	f001 f81d 	bl	800189c <HAL_GPIO_WritePin>
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40010c00 	.word	0x40010c00

0800086c <nrf24_set_CSN_low>:

/**
 * @brief Sets CSN low
 */
static inline void nrf24_set_CSN_low()
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, 0);
 8000870:	2200      	movs	r2, #0
 8000872:	2102      	movs	r1, #2
 8000874:	4802      	ldr	r0, [pc, #8]	; (8000880 <nrf24_set_CSN_low+0x14>)
 8000876:	f001 f811 	bl	800189c <HAL_GPIO_WritePin>
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40010c00 	.word	0x40010c00

08000884 <nrf24_write_reg>:


HAL_StatusTypeDef nrf24_write_reg(uint8_t reg, uint8_t data)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af02      	add	r7, sp, #8
 800088a:	4603      	mov	r3, r0
 800088c:	460a      	mov	r2, r1
 800088e:	71fb      	strb	r3, [r7, #7]
 8000890:	4613      	mov	r3, r2
 8000892:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[2] = {reg | NRF24_W_REGISTER, data};
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f043 0320 	orr.w	r3, r3, #32
 800089a:	b2db      	uxtb	r3, r3
 800089c:	733b      	strb	r3, [r7, #12]
 800089e:	79bb      	ldrb	r3, [r7, #6]
 80008a0:	737b      	strb	r3, [r7, #13]
    uint8_t status[2] = {0xFF, 0xFF};
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <nrf24_write_reg+0x50>)
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	813b      	strh	r3, [r7, #8]

    nrf24_set_CSN_low();
 80008a8:	f7ff ffe0 	bl	800086c <nrf24_set_CSN_low>
    HAL_StatusTypeDef retval = HAL_SPI_TransmitReceive(&SPI_HANDLE, buffer, status, 2, SPI_TIMEOUT);
 80008ac:	f107 0208 	add.w	r2, r7, #8
 80008b0:	f107 010c 	add.w	r1, r7, #12
 80008b4:	2364      	movs	r3, #100	; 0x64
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	2302      	movs	r3, #2
 80008ba:	4807      	ldr	r0, [pc, #28]	; (80008d8 <nrf24_write_reg+0x54>)
 80008bc:	f001 fedb 	bl	8002676 <HAL_SPI_TransmitReceive>
 80008c0:	4603      	mov	r3, r0
 80008c2:	73fb      	strb	r3, [r7, #15]
    nrf24_set_CSN_high();
 80008c4:	f7ff ffc6 	bl	8000854 <nrf24_set_CSN_high>

    return retval;
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	08004400 	.word	0x08004400
 80008d8:	200000ec 	.word	0x200000ec

080008dc <nrf24_write_reg_mb>:

HAL_StatusTypeDef nrf24_write_reg_mb(uint8_t reg, uint8_t* data, uint8_t size)
{
 80008dc:	b5b0      	push	{r4, r5, r7, lr}
 80008de:	b088      	sub	sp, #32
 80008e0:	af02      	add	r7, sp, #8
 80008e2:	4603      	mov	r3, r0
 80008e4:	6039      	str	r1, [r7, #0]
 80008e6:	71fb      	strb	r3, [r7, #7]
 80008e8:	4613      	mov	r3, r2
 80008ea:	71bb      	strb	r3, [r7, #6]
 80008ec:	466b      	mov	r3, sp
 80008ee:	461d      	mov	r5, r3
	uint8_t cmd = reg | NRF24_W_REGISTER;
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	f043 0320 	orr.w	r3, r3, #32
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	72fb      	strb	r3, [r7, #11]
    uint8_t status = 0xFF;
 80008fa:	23ff      	movs	r3, #255	; 0xff
 80008fc:	72bb      	strb	r3, [r7, #10]
    uint8_t response[size];
 80008fe:	79b8      	ldrb	r0, [r7, #6]
 8000900:	4603      	mov	r3, r0
 8000902:	3b01      	subs	r3, #1
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	b2c1      	uxtb	r1, r0
 8000908:	f04f 0200 	mov.w	r2, #0
 800090c:	f04f 0300 	mov.w	r3, #0
 8000910:	f04f 0400 	mov.w	r4, #0
 8000914:	00d4      	lsls	r4, r2, #3
 8000916:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800091a:	00cb      	lsls	r3, r1, #3
 800091c:	b2c1      	uxtb	r1, r0
 800091e:	f04f 0200 	mov.w	r2, #0
 8000922:	f04f 0300 	mov.w	r3, #0
 8000926:	f04f 0400 	mov.w	r4, #0
 800092a:	00d4      	lsls	r4, r2, #3
 800092c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000930:	00cb      	lsls	r3, r1, #3
 8000932:	4603      	mov	r3, r0
 8000934:	3307      	adds	r3, #7
 8000936:	08db      	lsrs	r3, r3, #3
 8000938:	00db      	lsls	r3, r3, #3
 800093a:	ebad 0d03 	sub.w	sp, sp, r3
 800093e:	ab02      	add	r3, sp, #8
 8000940:	3300      	adds	r3, #0
 8000942:	60fb      	str	r3, [r7, #12]

	nrf24_set_CSN_low();
 8000944:	f7ff ff92 	bl	800086c <nrf24_set_CSN_low>
	HAL_StatusTypeDef retval = HAL_SPI_TransmitReceive(&SPI_HANDLE, &cmd, &status, 1, SPI_TIMEOUT);
 8000948:	f107 020a 	add.w	r2, r7, #10
 800094c:	f107 010b 	add.w	r1, r7, #11
 8000950:	2364      	movs	r3, #100	; 0x64
 8000952:	9300      	str	r3, [sp, #0]
 8000954:	2301      	movs	r3, #1
 8000956:	480e      	ldr	r0, [pc, #56]	; (8000990 <nrf24_write_reg_mb+0xb4>)
 8000958:	f001 fe8d 	bl	8002676 <HAL_SPI_TransmitReceive>
 800095c:	4603      	mov	r3, r0
 800095e:	75fb      	strb	r3, [r7, #23]
	if (retval == HAL_OK) {
 8000960:	7dfb      	ldrb	r3, [r7, #23]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d10b      	bne.n	800097e <nrf24_write_reg_mb+0xa2>
		retval = HAL_SPI_TransmitReceive(&SPI_HANDLE, data, response, size, SPI_TIMEOUT);
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	79bb      	ldrb	r3, [r7, #6]
 800096a:	b299      	uxth	r1, r3
 800096c:	2364      	movs	r3, #100	; 0x64
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	460b      	mov	r3, r1
 8000972:	6839      	ldr	r1, [r7, #0]
 8000974:	4806      	ldr	r0, [pc, #24]	; (8000990 <nrf24_write_reg_mb+0xb4>)
 8000976:	f001 fe7e 	bl	8002676 <HAL_SPI_TransmitReceive>
 800097a:	4603      	mov	r3, r0
 800097c:	75fb      	strb	r3, [r7, #23]
	}
	nrf24_set_CSN_high();
 800097e:	f7ff ff69 	bl	8000854 <nrf24_set_CSN_high>

	return retval;
 8000982:	7dfb      	ldrb	r3, [r7, #23]
 8000984:	46ad      	mov	sp, r5
}
 8000986:	4618      	mov	r0, r3
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bdb0      	pop	{r4, r5, r7, pc}
 800098e:	bf00      	nop
 8000990:	200000ec 	.word	0x200000ec

08000994 <nrf24_read_reg>:

uint8_t nrf24_read_reg(uint8_t reg)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af02      	add	r7, sp, #8
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]
	// first byte in received data is STATUS and second is the actual data
	uint8_t cmd[2] = {reg, 0x00};
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	733b      	strb	r3, [r7, #12]
 80009a2:	2300      	movs	r3, #0
 80009a4:	737b      	strb	r3, [r7, #13]
	uint8_t data[2] = {0xFF, 0xFF};
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <nrf24_read_reg+0x40>)
 80009a8:	881b      	ldrh	r3, [r3, #0]
 80009aa:	813b      	strh	r3, [r7, #8]

	nrf24_set_CSN_low();
 80009ac:	f7ff ff5e 	bl	800086c <nrf24_set_CSN_low>
	HAL_SPI_TransmitReceive(&SPI_HANDLE, cmd, data, 2, SPI_TIMEOUT);
 80009b0:	f107 0208 	add.w	r2, r7, #8
 80009b4:	f107 010c 	add.w	r1, r7, #12
 80009b8:	2364      	movs	r3, #100	; 0x64
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	2302      	movs	r3, #2
 80009be:	4806      	ldr	r0, [pc, #24]	; (80009d8 <nrf24_read_reg+0x44>)
 80009c0:	f001 fe59 	bl	8002676 <HAL_SPI_TransmitReceive>
	nrf24_set_CSN_high();
 80009c4:	f7ff ff46 	bl	8000854 <nrf24_set_CSN_high>

	return data[1];
 80009c8:	7a7b      	ldrb	r3, [r7, #9]
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	08004400 	.word	0x08004400
 80009d8:	200000ec 	.word	0x200000ec

080009dc <nrf24_read_reg_mb>:

HAL_StatusTypeDef nrf24_read_reg_mb(uint8_t reg, uint8_t size, uint8_t* output)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af02      	add	r7, sp, #8
 80009e2:	4603      	mov	r3, r0
 80009e4:	603a      	str	r2, [r7, #0]
 80009e6:	71fb      	strb	r3, [r7, #7]
 80009e8:	460b      	mov	r3, r1
 80009ea:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0xFF;
 80009ec:	23ff      	movs	r3, #255	; 0xff
 80009ee:	73bb      	strb	r3, [r7, #14]

	nrf24_set_CSN_low();
 80009f0:	f7ff ff3c 	bl	800086c <nrf24_set_CSN_low>
	HAL_StatusTypeDef retval = HAL_SPI_TransmitReceive(&SPI_HANDLE, &reg, &status, 1, SPI_TIMEOUT);
 80009f4:	f107 020e 	add.w	r2, r7, #14
 80009f8:	1df9      	adds	r1, r7, #7
 80009fa:	2364      	movs	r3, #100	; 0x64
 80009fc:	9300      	str	r3, [sp, #0]
 80009fe:	2301      	movs	r3, #1
 8000a00:	480b      	ldr	r0, [pc, #44]	; (8000a30 <nrf24_read_reg_mb+0x54>)
 8000a02:	f001 fe38 	bl	8002676 <HAL_SPI_TransmitReceive>
 8000a06:	4603      	mov	r3, r0
 8000a08:	73fb      	strb	r3, [r7, #15]
	if (retval == HAL_OK) {
 8000a0a:	7bfb      	ldrb	r3, [r7, #15]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d108      	bne.n	8000a22 <nrf24_read_reg_mb+0x46>
		retval = HAL_SPI_Receive(&SPI_HANDLE, output, size, SPI_TIMEOUT);
 8000a10:	79bb      	ldrb	r3, [r7, #6]
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	2364      	movs	r3, #100	; 0x64
 8000a16:	6839      	ldr	r1, [r7, #0]
 8000a18:	4805      	ldr	r0, [pc, #20]	; (8000a30 <nrf24_read_reg_mb+0x54>)
 8000a1a:	f001 fd1b 	bl	8002454 <HAL_SPI_Receive>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	73fb      	strb	r3, [r7, #15]
	}
	nrf24_set_CSN_high();
 8000a22:	f7ff ff17 	bl	8000854 <nrf24_set_CSN_high>

	return retval;
 8000a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3710      	adds	r7, #16
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200000ec 	.word	0x200000ec

08000a34 <nrf24_init>:

HAL_StatusTypeDef nrf24_init()
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
	nrf24_set_CE_low();
 8000a3a:	f7ff feff 	bl	800083c <nrf24_set_CE_low>

	// Activate cmd to enable FEATURE register
	uint8_t activate_cmd[2] = {NRF24_ACTIVATE, 0x73};
 8000a3e:	4b31      	ldr	r3, [pc, #196]	; (8000b04 <nrf24_init+0xd0>)
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	80bb      	strh	r3, [r7, #4]
	HANDLE_SPI_ERROR(HAL_SPI_Transmit(&SPI_HANDLE, activate_cmd, 2, SPI_TIMEOUT));
 8000a44:	1d39      	adds	r1, r7, #4
 8000a46:	2364      	movs	r3, #100	; 0x64
 8000a48:	2202      	movs	r2, #2
 8000a4a:	482f      	ldr	r0, [pc, #188]	; (8000b08 <nrf24_init+0xd4>)
 8000a4c:	f001 fbc6 	bl	80021dc <HAL_SPI_Transmit>
 8000a50:	4603      	mov	r3, r0
 8000a52:	73fb      	strb	r3, [r7, #15]
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <nrf24_init+0x2a>
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	e04d      	b.n	8000afa <nrf24_init+0xc6>

	// Disable auto-acknowledgment
	HANDLE_SPI_ERROR(nrf24_write_reg(NRF24_EN_AA_REG, 0));
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2001      	movs	r0, #1
 8000a62:	f7ff ff0f 	bl	8000884 <nrf24_write_reg>
 8000a66:	4603      	mov	r3, r0
 8000a68:	73bb      	strb	r3, [r7, #14]
 8000a6a:	7bbb      	ldrb	r3, [r7, #14]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <nrf24_init+0x40>
 8000a70:	7bbb      	ldrb	r3, [r7, #14]
 8000a72:	e042      	b.n	8000afa <nrf24_init+0xc6>

	// Set everything in CONFIG to 0 -> disable CRC, PTX mode, power down
	HANDLE_SPI_ERROR(nrf24_write_reg(NRF24_CONFIG_REG, 0));
 8000a74:	2100      	movs	r1, #0
 8000a76:	2000      	movs	r0, #0
 8000a78:	f7ff ff04 	bl	8000884 <nrf24_write_reg>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	737b      	strb	r3, [r7, #13]
 8000a80:	7b7b      	ldrb	r3, [r7, #13]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <nrf24_init+0x56>
 8000a86:	7b7b      	ldrb	r3, [r7, #13]
 8000a88:	e037      	b.n	8000afa <nrf24_init+0xc6>

	// Disable all data pipes
	HANDLE_SPI_ERROR(nrf24_write_reg(NRF24_EN_RXADDR_REG, 0));
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	2002      	movs	r0, #2
 8000a8e:	f7ff fef9 	bl	8000884 <nrf24_write_reg>
 8000a92:	4603      	mov	r3, r0
 8000a94:	733b      	strb	r3, [r7, #12]
 8000a96:	7b3b      	ldrb	r3, [r7, #12]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <nrf24_init+0x6c>
 8000a9c:	7b3b      	ldrb	r3, [r7, #12]
 8000a9e:	e02c      	b.n	8000afa <nrf24_init+0xc6>
	
	// 5-byte address width
	HANDLE_SPI_ERROR(nrf24_write_reg(NRF24_SETUP_AW_REG, 0b00000011));
 8000aa0:	2103      	movs	r1, #3
 8000aa2:	2003      	movs	r0, #3
 8000aa4:	f7ff feee 	bl	8000884 <nrf24_write_reg>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	72fb      	strb	r3, [r7, #11]
 8000aac:	7afb      	ldrb	r3, [r7, #11]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <nrf24_init+0x82>
 8000ab2:	7afb      	ldrb	r3, [r7, #11]
 8000ab4:	e021      	b.n	8000afa <nrf24_init+0xc6>

	// Disable auto retransmit
	HANDLE_SPI_ERROR(nrf24_write_reg(NRF24_SETUP_RETR_REG, 0));
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	2004      	movs	r0, #4
 8000aba:	f7ff fee3 	bl	8000884 <nrf24_write_reg>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	72bb      	strb	r3, [r7, #10]
 8000ac2:	7abb      	ldrb	r3, [r7, #10]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <nrf24_init+0x98>
 8000ac8:	7abb      	ldrb	r3, [r7, #10]
 8000aca:	e016      	b.n	8000afa <nrf24_init+0xc6>
	
	// Set channel 2 (reset value)
	HANDLE_SPI_ERROR(nrf24_write_reg(NRF24_RF_CH_REG, 2));
 8000acc:	2102      	movs	r1, #2
 8000ace:	2005      	movs	r0, #5
 8000ad0:	f7ff fed8 	bl	8000884 <nrf24_write_reg>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	727b      	strb	r3, [r7, #9]
 8000ad8:	7a7b      	ldrb	r3, [r7, #9]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <nrf24_init+0xae>
 8000ade:	7a7b      	ldrb	r3, [r7, #9]
 8000ae0:	e00b      	b.n	8000afa <nrf24_init+0xc6>

	// Data rate 2Mbps, power 0dBm, LNA gain
	HANDLE_SPI_ERROR(nrf24_write_reg(NRF24_RF_SETUP_REG, 0b00001111));
 8000ae2:	210f      	movs	r1, #15
 8000ae4:	2006      	movs	r0, #6
 8000ae6:	f7ff fecd 	bl	8000884 <nrf24_write_reg>
 8000aea:	4603      	mov	r3, r0
 8000aec:	723b      	strb	r3, [r7, #8]
 8000aee:	7a3b      	ldrb	r3, [r7, #8]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <nrf24_init+0xc4>
 8000af4:	7a3b      	ldrb	r3, [r7, #8]
 8000af6:	e000      	b.n	8000afa <nrf24_init+0xc6>

	return HAL_OK;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	08004404 	.word	0x08004404
 8000b08:	200000ec 	.word	0x200000ec

08000b0c <nrf24_reset>:

void nrf24_reset()
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
	nrf24_set_CE_low();
 8000b12:	f7ff fe93 	bl	800083c <nrf24_set_CE_low>

	nrf24_write_reg(NRF24_EN_AA_REG, 0x3F);
 8000b16:	213f      	movs	r1, #63	; 0x3f
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f7ff feb3 	bl	8000884 <nrf24_write_reg>
	nrf24_write_reg(NRF24_CONFIG_REG, 0x08);
 8000b1e:	2108      	movs	r1, #8
 8000b20:	2000      	movs	r0, #0
 8000b22:	f7ff feaf 	bl	8000884 <nrf24_write_reg>
	nrf24_write_reg(NRF24_EN_RXADDR_REG, 0x03);
 8000b26:	2103      	movs	r1, #3
 8000b28:	2002      	movs	r0, #2
 8000b2a:	f7ff feab 	bl	8000884 <nrf24_write_reg>
	nrf24_write_reg(NRF24_SETUP_AW_REG, 0x03);
 8000b2e:	2103      	movs	r1, #3
 8000b30:	2003      	movs	r0, #3
 8000b32:	f7ff fea7 	bl	8000884 <nrf24_write_reg>
	nrf24_write_reg(NRF24_SETUP_RETR_REG, 0x03);
 8000b36:	2103      	movs	r1, #3
 8000b38:	2004      	movs	r0, #4
 8000b3a:	f7ff fea3 	bl	8000884 <nrf24_write_reg>
	nrf24_write_reg(NRF24_RF_CH_REG, 0x02);
 8000b3e:	2102      	movs	r1, #2
 8000b40:	2005      	movs	r0, #5
 8000b42:	f7ff fe9f 	bl	8000884 <nrf24_write_reg>
	nrf24_write_reg(NRF24_RF_SETUP_REG, 0xF);
 8000b46:	210f      	movs	r1, #15
 8000b48:	2006      	movs	r0, #6
 8000b4a:	f7ff fe9b 	bl	8000884 <nrf24_write_reg>
	nrf24_write_reg(NRF24_STATUS_REG, 0x00);
 8000b4e:	2100      	movs	r1, #0
 8000b50:	2007      	movs	r0, #7
 8000b52:	f7ff fe97 	bl	8000884 <nrf24_write_reg>
	nrf24_write_reg(NRF24_OBSERVE_TX_REG, 0x00);
 8000b56:	2100      	movs	r1, #0
 8000b58:	2008      	movs	r0, #8
 8000b5a:	f7ff fe93 	bl	8000884 <nrf24_write_reg>
	nrf24_write_reg(NRF24_CD_REG, 0x00);
 8000b5e:	2100      	movs	r1, #0
 8000b60:	2009      	movs	r0, #9
 8000b62:	f7ff fe8f 	bl	8000884 <nrf24_write_reg>

	uint8_t rx_addr_p0[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000b66:	4a31      	ldr	r2, [pc, #196]	; (8000c2c <nrf24_reset+0x120>)
 8000b68:	f107 0310 	add.w	r3, r7, #16
 8000b6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b70:	6018      	str	r0, [r3, #0]
 8000b72:	3304      	adds	r3, #4
 8000b74:	7019      	strb	r1, [r3, #0]
	nrf24_write_reg_mb(NRF24_RX_ADDR_P0_REG, rx_addr_p0, 5);
 8000b76:	f107 0310 	add.w	r3, r7, #16
 8000b7a:	2205      	movs	r2, #5
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	200a      	movs	r0, #10
 8000b80:	f7ff feac 	bl	80008dc <nrf24_write_reg_mb>

	uint8_t rx_addr_p1[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000b84:	4a2a      	ldr	r2, [pc, #168]	; (8000c30 <nrf24_reset+0x124>)
 8000b86:	f107 0308 	add.w	r3, r7, #8
 8000b8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b8e:	6018      	str	r0, [r3, #0]
 8000b90:	3304      	adds	r3, #4
 8000b92:	7019      	strb	r1, [r3, #0]
	nrf24_write_reg_mb(NRF24_RX_ADDR_P1_REG, rx_addr_p1, 5);
 8000b94:	f107 0308 	add.w	r3, r7, #8
 8000b98:	2205      	movs	r2, #5
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	200b      	movs	r0, #11
 8000b9e:	f7ff fe9d 	bl	80008dc <nrf24_write_reg_mb>

	nrf24_write_reg(NRF24_RX_ADDR_P2_REG, 0xC3);
 8000ba2:	21c3      	movs	r1, #195	; 0xc3
 8000ba4:	200c      	movs	r0, #12
 8000ba6:	f7ff fe6d 	bl	8000884 <nrf24_write_reg>
	nrf24_write_reg(NRF24_RX_ADDR_P3_REG, 0xC4);
 8000baa:	21c4      	movs	r1, #196	; 0xc4
 8000bac:	200d      	movs	r0, #13
 8000bae:	f7ff fe69 	bl	8000884 <nrf24_write_reg>
	nrf24_write_reg(NRF24_RX_ADDR_P4_REG, 0xC5);
 8000bb2:	21c5      	movs	r1, #197	; 0xc5
 8000bb4:	200e      	movs	r0, #14
 8000bb6:	f7ff fe65 	bl	8000884 <nrf24_write_reg>
	nrf24_write_reg(NRF24_RX_ADDR_P5_REG, 0xC6);
 8000bba:	21c6      	movs	r1, #198	; 0xc6
 8000bbc:	200f      	movs	r0, #15
 8000bbe:	f7ff fe61 	bl	8000884 <nrf24_write_reg>

	uint8_t tx_addr[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000bc2:	4a1a      	ldr	r2, [pc, #104]	; (8000c2c <nrf24_reset+0x120>)
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bca:	6018      	str	r0, [r3, #0]
 8000bcc:	3304      	adds	r3, #4
 8000bce:	7019      	strb	r1, [r3, #0]
	nrf24_write_reg_mb(NRF24_TX_ADDR_REG, tx_addr, 5);
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	2205      	movs	r2, #5
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	2010      	movs	r0, #16
 8000bd8:	f7ff fe80 	bl	80008dc <nrf24_write_reg_mb>

	nrf24_write_reg(NRF24_RX_PW_P0_REG, 0);
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2011      	movs	r0, #17
 8000be0:	f7ff fe50 	bl	8000884 <nrf24_write_reg>
	nrf24_write_reg(NRF24_RX_PW_P1_REG, 0);
 8000be4:	2100      	movs	r1, #0
 8000be6:	2012      	movs	r0, #18
 8000be8:	f7ff fe4c 	bl	8000884 <nrf24_write_reg>
	nrf24_write_reg(NRF24_RX_PW_P2_REG, 0);
 8000bec:	2100      	movs	r1, #0
 8000bee:	2013      	movs	r0, #19
 8000bf0:	f7ff fe48 	bl	8000884 <nrf24_write_reg>
	nrf24_write_reg(NRF24_RX_PW_P3_REG, 0);
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2014      	movs	r0, #20
 8000bf8:	f7ff fe44 	bl	8000884 <nrf24_write_reg>
	nrf24_write_reg(NRF24_RX_PW_P4_REG, 0);
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2015      	movs	r0, #21
 8000c00:	f7ff fe40 	bl	8000884 <nrf24_write_reg>
	nrf24_write_reg(NRF24_RX_PW_P5_REG, 0);
 8000c04:	2100      	movs	r1, #0
 8000c06:	2016      	movs	r0, #22
 8000c08:	f7ff fe3c 	bl	8000884 <nrf24_write_reg>
	nrf24_write_reg(NRF24_FIFO_STATUS_REG, 0x11);
 8000c0c:	2111      	movs	r1, #17
 8000c0e:	2017      	movs	r0, #23
 8000c10:	f7ff fe38 	bl	8000884 <nrf24_write_reg>
	nrf24_write_reg(NRF24_DYNPD_REG, 0);
 8000c14:	2100      	movs	r1, #0
 8000c16:	201c      	movs	r0, #28
 8000c18:	f7ff fe34 	bl	8000884 <nrf24_write_reg>
	nrf24_write_reg(NRF24_FEATURE_REG, 0);
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	201d      	movs	r0, #29
 8000c20:	f7ff fe30 	bl	8000884 <nrf24_write_reg>
}
 8000c24:	bf00      	nop
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	08004408 	.word	0x08004408
 8000c30:	08004410 	.word	0x08004410

08000c34 <nrf24_read_state>:

void nrf24_read_state(NRF24_StateTypeDef* state) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  state->config = nrf24_read_reg(NRF24_CONFIG_REG);
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff fea9 	bl	8000994 <nrf24_read_reg>
 8000c42:	4603      	mov	r3, r0
 8000c44:	461a      	mov	r2, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	701a      	strb	r2, [r3, #0]
  state->en_aa = nrf24_read_reg(NRF24_EN_AA_REG);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff fea2 	bl	8000994 <nrf24_read_reg>
 8000c50:	4603      	mov	r3, r0
 8000c52:	461a      	mov	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	705a      	strb	r2, [r3, #1]
  state->en_rxaddr = nrf24_read_reg(NRF24_EN_RXADDR_REG);
 8000c58:	2002      	movs	r0, #2
 8000c5a:	f7ff fe9b 	bl	8000994 <nrf24_read_reg>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	461a      	mov	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	709a      	strb	r2, [r3, #2]
  state->setup_aw = nrf24_read_reg(NRF24_SETUP_AW_REG);
 8000c66:	2003      	movs	r0, #3
 8000c68:	f7ff fe94 	bl	8000994 <nrf24_read_reg>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	461a      	mov	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	70da      	strb	r2, [r3, #3]
  state->setup_retr = nrf24_read_reg(NRF24_SETUP_RETR_REG);
 8000c74:	2004      	movs	r0, #4
 8000c76:	f7ff fe8d 	bl	8000994 <nrf24_read_reg>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	711a      	strb	r2, [r3, #4]
  state->rf_ch = nrf24_read_reg(NRF24_RF_CH_REG);
 8000c82:	2005      	movs	r0, #5
 8000c84:	f7ff fe86 	bl	8000994 <nrf24_read_reg>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	715a      	strb	r2, [r3, #5]
  state->rf_setup = nrf24_read_reg(NRF24_RF_SETUP_REG);
 8000c90:	2006      	movs	r0, #6
 8000c92:	f7ff fe7f 	bl	8000994 <nrf24_read_reg>
 8000c96:	4603      	mov	r3, r0
 8000c98:	461a      	mov	r2, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	719a      	strb	r2, [r3, #6]
  state->observe_tx = nrf24_read_reg(NRF24_OBSERVE_TX_REG);
 8000c9e:	2008      	movs	r0, #8
 8000ca0:	f7ff fe78 	bl	8000994 <nrf24_read_reg>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	721a      	strb	r2, [r3, #8]
  state->cd = nrf24_read_reg(NRF24_CD_REG);
 8000cac:	2009      	movs	r0, #9
 8000cae:	f7ff fe71 	bl	8000994 <nrf24_read_reg>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	725a      	strb	r2, [r3, #9]

  // Read RX addresses for pipes 0 to 5
  nrf24_read_reg_mb(NRF24_RX_ADDR_P0_REG, 5, state->rx_addr_p0);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	330a      	adds	r3, #10
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	2105      	movs	r1, #5
 8000cc2:	200a      	movs	r0, #10
 8000cc4:	f7ff fe8a 	bl	80009dc <nrf24_read_reg_mb>
  nrf24_read_reg_mb(NRF24_RX_ADDR_P1_REG, 5, state->rx_addr_p1);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	330f      	adds	r3, #15
 8000ccc:	461a      	mov	r2, r3
 8000cce:	2105      	movs	r1, #5
 8000cd0:	200b      	movs	r0, #11
 8000cd2:	f7ff fe83 	bl	80009dc <nrf24_read_reg_mb>
  state->rx_addr_p2 = nrf24_read_reg(NRF24_RX_ADDR_P2_REG);
 8000cd6:	200c      	movs	r0, #12
 8000cd8:	f7ff fe5c 	bl	8000994 <nrf24_read_reg>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	461a      	mov	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	751a      	strb	r2, [r3, #20]
  state->rx_addr_p3 = nrf24_read_reg(NRF24_RX_ADDR_P3_REG);
 8000ce4:	200d      	movs	r0, #13
 8000ce6:	f7ff fe55 	bl	8000994 <nrf24_read_reg>
 8000cea:	4603      	mov	r3, r0
 8000cec:	461a      	mov	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	755a      	strb	r2, [r3, #21]
  state->rx_addr_p4 = nrf24_read_reg(NRF24_RX_ADDR_P4_REG);
 8000cf2:	200e      	movs	r0, #14
 8000cf4:	f7ff fe4e 	bl	8000994 <nrf24_read_reg>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	759a      	strb	r2, [r3, #22]
  state->rx_addr_p5 = nrf24_read_reg(NRF24_RX_ADDR_P5_REG);
 8000d00:	200f      	movs	r0, #15
 8000d02:	f7ff fe47 	bl	8000994 <nrf24_read_reg>
 8000d06:	4603      	mov	r3, r0
 8000d08:	461a      	mov	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	75da      	strb	r2, [r3, #23]

  // Read TX address (5 bytes)
  nrf24_read_reg_mb(NRF24_TX_ADDR_REG, 5, state->tx_addr);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3318      	adds	r3, #24
 8000d12:	461a      	mov	r2, r3
 8000d14:	2105      	movs	r1, #5
 8000d16:	2010      	movs	r0, #16
 8000d18:	f7ff fe60 	bl	80009dc <nrf24_read_reg_mb>

  // Read RX payload widths for pipes 0 to 5
  nrf24_read_reg_mb(NRF24_RX_PW_P0_REG, 6, state->rx_pw_px);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	331d      	adds	r3, #29
 8000d20:	461a      	mov	r2, r3
 8000d22:	2106      	movs	r1, #6
 8000d24:	2011      	movs	r0, #17
 8000d26:	f7ff fe59 	bl	80009dc <nrf24_read_reg_mb>
  // Read remaining registers
  state->fifo_status = nrf24_read_reg(NRF24_FIFO_STATUS_REG);
 8000d2a:	2017      	movs	r0, #23
 8000d2c:	f7ff fe32 	bl	8000994 <nrf24_read_reg>
 8000d30:	4603      	mov	r3, r0
 8000d32:	461a      	mov	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  state->dynpd = nrf24_read_reg(NRF24_DYNPD_REG);
 8000d3a:	201c      	movs	r0, #28
 8000d3c:	f7ff fe2a 	bl	8000994 <nrf24_read_reg>
 8000d40:	4603      	mov	r3, r0
 8000d42:	461a      	mov	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  state->feature = nrf24_read_reg(NRF24_FEATURE_REG);
 8000d4a:	201d      	movs	r0, #29
 8000d4c:	f7ff fe22 	bl	8000994 <nrf24_read_reg>
 8000d50:	4603      	mov	r3, r0
 8000d52:	461a      	mov	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  state->status = nrf24_read_reg(NRF24_STATUS_REG);
 8000d5a:	2007      	movs	r0, #7
 8000d5c:	f7ff fe1a 	bl	8000994 <nrf24_read_reg>
 8000d60:	4603      	mov	r3, r0
 8000d62:	461a      	mov	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	71da      	strb	r2, [r3, #7]
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <nrf24_set_rx_mode>:
	nrf24_write_reg(NRF24_CONFIG_REG, config);
	HAL_Delay(2);
}

void nrf24_set_rx_mode(uint8_t channel, uint8_t* address, uint8_t pipe)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	6039      	str	r1, [r7, #0]
 8000d7a:	71fb      	strb	r3, [r7, #7]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	71bb      	strb	r3, [r7, #6]
	if (channel > 127 || pipe > 5) {
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	db63      	blt.n	8000e50 <nrf24_set_rx_mode+0xe0>
 8000d88:	79bb      	ldrb	r3, [r7, #6]
 8000d8a:	2b05      	cmp	r3, #5
 8000d8c:	d860      	bhi.n	8000e50 <nrf24_set_rx_mode+0xe0>
		return;
	}

	nrf24_set_CE_low();
 8000d8e:	f7ff fd55 	bl	800083c <nrf24_set_CE_low>

	uint8_t current_pipes = nrf24_read_reg(NRF24_EN_RXADDR_REG);
 8000d92:	2002      	movs	r0, #2
 8000d94:	f7ff fdfe 	bl	8000994 <nrf24_read_reg>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	73fb      	strb	r3, [r7, #15]
	nrf24_write_reg(NRF24_EN_RXADDR_REG, current_pipes | (1 << pipe));
 8000d9c:	79bb      	ldrb	r3, [r7, #6]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	b25a      	sxtb	r2, r3
 8000da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	b25b      	sxtb	r3, r3
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	4619      	mov	r1, r3
 8000db2:	2002      	movs	r0, #2
 8000db4:	f7ff fd66 	bl	8000884 <nrf24_write_reg>

	uint8_t pipe_addr_reg = NRF24_RX_ADDR_P0_REG + pipe;
 8000db8:	79bb      	ldrb	r3, [r7, #6]
 8000dba:	330a      	adds	r3, #10
 8000dbc:	73bb      	strb	r3, [r7, #14]
	if (pipe < 3) {
 8000dbe:	79bb      	ldrb	r3, [r7, #6]
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d806      	bhi.n	8000dd2 <nrf24_set_rx_mode+0x62>
		// TODO: handle different address width than 5 bytes
		nrf24_write_reg_mb(pipe_addr_reg, address, 5);
 8000dc4:	7bbb      	ldrb	r3, [r7, #14]
 8000dc6:	2205      	movs	r2, #5
 8000dc8:	6839      	ldr	r1, [r7, #0]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fd86 	bl	80008dc <nrf24_write_reg_mb>
 8000dd0:	e006      	b.n	8000de0 <nrf24_set_rx_mode+0x70>
	}
	else {
		// if pipe is 3-5, only the first byte of address will be written
		nrf24_write_reg(pipe_addr_reg, address[0]);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	781a      	ldrb	r2, [r3, #0]
 8000dd6:	7bbb      	ldrb	r3, [r7, #14]
 8000dd8:	4611      	mov	r1, r2
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fd52 	bl	8000884 <nrf24_write_reg>
	}

	uint8_t pipe_size_reg = NRF24_RX_PW_P0_REG + pipe;
 8000de0:	79bb      	ldrb	r3, [r7, #6]
 8000de2:	3311      	adds	r3, #17
 8000de4:	737b      	strb	r3, [r7, #13]
	// TODO: handle dynamic payload length
	nrf24_write_reg(pipe_size_reg, 32);
 8000de6:	7b7b      	ldrb	r3, [r7, #13]
 8000de8:	2120      	movs	r1, #32
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fd4a 	bl	8000884 <nrf24_write_reg>

	nrf24_write_reg(NRF24_RF_CH_REG, channel); // set channel
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	4619      	mov	r1, r3
 8000df4:	2005      	movs	r0, #5
 8000df6:	f7ff fd45 	bl	8000884 <nrf24_write_reg>

	uint8_t config = nrf24_read_reg(NRF24_CONFIG_REG);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f7ff fdca 	bl	8000994 <nrf24_read_reg>
 8000e00:	4603      	mov	r3, r0
 8000e02:	733b      	strb	r3, [r7, #12]
	config |= 0b110000; // disable TX_DS and MAX_RT interrupts
 8000e04:	7b3b      	ldrb	r3, [r7, #12]
 8000e06:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000e0a:	733b      	strb	r3, [r7, #12]
	config |= 0b10;  // power up
 8000e0c:	7b3b      	ldrb	r3, [r7, #12]
 8000e0e:	f043 0302 	orr.w	r3, r3, #2
 8000e12:	733b      	strb	r3, [r7, #12]
	nrf24_write_reg(NRF24_CONFIG_REG, config);
 8000e14:	7b3b      	ldrb	r3, [r7, #12]
 8000e16:	4619      	mov	r1, r3
 8000e18:	2000      	movs	r0, #0
 8000e1a:	f7ff fd33 	bl	8000884 <nrf24_write_reg>
	HAL_Delay(2);
 8000e1e:	2002      	movs	r0, #2
 8000e20:	f000 fa3c 	bl	800129c <HAL_Delay>
	config |= 0b11; // PRX mode
 8000e24:	7b3b      	ldrb	r3, [r7, #12]
 8000e26:	f043 0303 	orr.w	r3, r3, #3
 8000e2a:	733b      	strb	r3, [r7, #12]
	nrf24_write_reg(NRF24_CONFIG_REG, config);
 8000e2c:	7b3b      	ldrb	r3, [r7, #12]
 8000e2e:	4619      	mov	r1, r3
 8000e30:	2000      	movs	r0, #0
 8000e32:	f7ff fd27 	bl	8000884 <nrf24_write_reg>
	while (SPI_HANDLE.State != HAL_SPI_STATE_READY);
 8000e36:	bf00      	nop
 8000e38:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <nrf24_set_rx_mode+0xe8>)
 8000e3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d1f9      	bne.n	8000e38 <nrf24_set_rx_mode+0xc8>
	nrf24_set_CE_high();
 8000e44:	f7ff fcee 	bl	8000824 <nrf24_set_CE_high>
	delay_us(130);
 8000e48:	2082      	movs	r0, #130	; 0x82
 8000e4a:	f7ff fcd3 	bl	80007f4 <delay_us>
 8000e4e:	e000      	b.n	8000e52 <nrf24_set_rx_mode+0xe2>
		return;
 8000e50:	bf00      	nop
}
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	200000ec 	.word	0x200000ec

08000e5c <nrf24_receive>:

	nrf24_write_reg(NRF24_STATUS_REG, status |= (1<<5)); // clear interrupt
}

uint8_t nrf24_receive(uint8_t pipe, uint8_t* data, uint8_t size)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	71fb      	strb	r3, [r7, #7]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73bb      	strb	r3, [r7, #14]

	// Check if received pipe is correct
	if (((status >> 1) & 0x7) != pipe) {
 8000e70:	7bbb      	ldrb	r3, [r7, #14]
 8000e72:	085b      	lsrs	r3, r3, #1
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	f003 0207 	and.w	r2, r3, #7
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d001      	beq.n	8000e84 <nrf24_receive+0x28>
		return 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	e044      	b.n	8000f0e <nrf24_receive+0xb2>
	}

	uint8_t fifo_status = nrf24_read_reg(NRF24_FIFO_STATUS_REG);
 8000e84:	2017      	movs	r0, #23
 8000e86:	f7ff fd85 	bl	8000994 <nrf24_read_reg>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	73fb      	strb	r3, [r7, #15]
	// Check if rx fifo empty
	if (fifo_status & 1) {
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <nrf24_receive+0x40>
		return 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	e038      	b.n	8000f0e <nrf24_receive+0xb2>
	}

	uint8_t cmd = NRF24_R_RX_PAYLOAD;
 8000e9c:	2361      	movs	r3, #97	; 0x61
 8000e9e:	737b      	strb	r3, [r7, #13]

	while (!(fifo_status & 1))
 8000ea0:	e02f      	b.n	8000f02 <nrf24_receive+0xa6>
	{
		nrf24_set_CSN_low();
 8000ea2:	f7ff fce3 	bl	800086c <nrf24_set_CSN_low>
		HAL_SPI_TransmitReceive_IT(&SPI_HANDLE, &cmd, &status, 1);
 8000ea6:	f107 020e 	add.w	r2, r7, #14
 8000eaa:	f107 010d 	add.w	r1, r7, #13
 8000eae:	2301      	movs	r3, #1
 8000eb0:	4819      	ldr	r0, [pc, #100]	; (8000f18 <nrf24_receive+0xbc>)
 8000eb2:	f001 fe21 	bl	8002af8 <HAL_SPI_TransmitReceive_IT>
		while (SPI_HANDLE.State != HAL_SPI_STATE_READY);
 8000eb6:	bf00      	nop
 8000eb8:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <nrf24_receive+0xbc>)
 8000eba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d1f9      	bne.n	8000eb8 <nrf24_receive+0x5c>
		HAL_SPI_Receive_IT(&SPI_HANDLE, data, size);
 8000ec4:	79bb      	ldrb	r3, [r7, #6]
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	461a      	mov	r2, r3
 8000eca:	6839      	ldr	r1, [r7, #0]
 8000ecc:	4812      	ldr	r0, [pc, #72]	; (8000f18 <nrf24_receive+0xbc>)
 8000ece:	f001 fd75 	bl	80029bc <HAL_SPI_Receive_IT>
		while (SPI_HANDLE.State != HAL_SPI_STATE_READY);
 8000ed2:	bf00      	nop
 8000ed4:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <nrf24_receive+0xbc>)
 8000ed6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d1f9      	bne.n	8000ed4 <nrf24_receive+0x78>
		nrf24_set_CSN_high();
 8000ee0:	f7ff fcb8 	bl	8000854 <nrf24_set_CSN_high>
		nrf24_write_reg(NRF24_STATUS_REG, status |= (1<<6)); // clear interrupt
 8000ee4:	7bbb      	ldrb	r3, [r7, #14]
 8000ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	73bb      	strb	r3, [r7, #14]
 8000eee:	7bbb      	ldrb	r3, [r7, #14]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	2007      	movs	r0, #7
 8000ef4:	f7ff fcc6 	bl	8000884 <nrf24_write_reg>
		fifo_status = nrf24_read_reg(NRF24_FIFO_STATUS_REG);
 8000ef8:	2017      	movs	r0, #23
 8000efa:	f7ff fd4b 	bl	8000994 <nrf24_read_reg>
 8000efe:	4603      	mov	r3, r0
 8000f00:	73fb      	strb	r3, [r7, #15]
	while (!(fifo_status & 1))
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d0ca      	beq.n	8000ea2 <nrf24_receive+0x46>
	}

	return 1;
 8000f0c:	2301      	movs	r3, #1
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200000ec 	.word	0x200000ec

08000f1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */
	#define __HAL_AFIO_REMAP_SWJ_NOJTAG() __NOP()
  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f22:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <HAL_MspInit+0x44>)
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <HAL_MspInit+0x44>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6193      	str	r3, [r2, #24]
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <HAL_MspInit+0x44>)
 8000f30:	699b      	ldr	r3, [r3, #24]
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <HAL_MspInit+0x44>)
 8000f3c:	69db      	ldr	r3, [r3, #28]
 8000f3e:	4a08      	ldr	r2, [pc, #32]	; (8000f60 <HAL_MspInit+0x44>)
 8000f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f44:	61d3      	str	r3, [r2, #28]
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_MspInit+0x44>)
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f52:	bf00      	nop

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	40021000 	.word	0x40021000

08000f64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a1f      	ldr	r2, [pc, #124]	; (8000ffc <HAL_SPI_MspInit+0x98>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d137      	bne.n	8000ff4 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f84:	4b1e      	ldr	r3, [pc, #120]	; (8001000 <HAL_SPI_MspInit+0x9c>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	4a1d      	ldr	r2, [pc, #116]	; (8001000 <HAL_SPI_MspInit+0x9c>)
 8000f8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f8e:	6193      	str	r3, [r2, #24]
 8000f90:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <HAL_SPI_MspInit+0x9c>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9c:	4b18      	ldr	r3, [pc, #96]	; (8001000 <HAL_SPI_MspInit+0x9c>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	4a17      	ldr	r2, [pc, #92]	; (8001000 <HAL_SPI_MspInit+0x9c>)
 8000fa2:	f043 0304 	orr.w	r3, r3, #4
 8000fa6:	6193      	str	r3, [r2, #24]
 8000fa8:	4b15      	ldr	r3, [pc, #84]	; (8001000 <HAL_SPI_MspInit+0x9c>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	f003 0304 	and.w	r3, r3, #4
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000fb4:	23a0      	movs	r3, #160	; 0xa0
 8000fb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	480f      	ldr	r0, [pc, #60]	; (8001004 <HAL_SPI_MspInit+0xa0>)
 8000fc8:	f000 fb0e 	bl	80015e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fcc:	2340      	movs	r3, #64	; 0x40
 8000fce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4809      	ldr	r0, [pc, #36]	; (8001004 <HAL_SPI_MspInit+0xa0>)
 8000fe0:	f000 fb02 	bl	80015e8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2023      	movs	r0, #35	; 0x23
 8000fea:	f000 fa50 	bl	800148e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000fee:	2023      	movs	r0, #35	; 0x23
 8000ff0:	f000 fa69 	bl	80014c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ff4:	bf00      	nop
 8000ff6:	3720      	adds	r7, #32
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40013000 	.word	0x40013000
 8001000:	40021000 	.word	0x40021000
 8001004:	40010800 	.word	0x40010800

08001008 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a1f      	ldr	r2, [pc, #124]	; (8001094 <HAL_TIM_Base_MspInit+0x8c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d10c      	bne.n	8001034 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800101a:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <HAL_TIM_Base_MspInit+0x90>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	4a1e      	ldr	r2, [pc, #120]	; (8001098 <HAL_TIM_Base_MspInit+0x90>)
 8001020:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001024:	6193      	str	r3, [r2, #24]
 8001026:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <HAL_TIM_Base_MspInit+0x90>)
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001032:	e02a      	b.n	800108a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800103c:	d10c      	bne.n	8001058 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800103e:	4b16      	ldr	r3, [pc, #88]	; (8001098 <HAL_TIM_Base_MspInit+0x90>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	4a15      	ldr	r2, [pc, #84]	; (8001098 <HAL_TIM_Base_MspInit+0x90>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	61d3      	str	r3, [r2, #28]
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <HAL_TIM_Base_MspInit+0x90>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]
}
 8001056:	e018      	b.n	800108a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0f      	ldr	r2, [pc, #60]	; (800109c <HAL_TIM_Base_MspInit+0x94>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d113      	bne.n	800108a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001062:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <HAL_TIM_Base_MspInit+0x90>)
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	4a0c      	ldr	r2, [pc, #48]	; (8001098 <HAL_TIM_Base_MspInit+0x90>)
 8001068:	f043 0302 	orr.w	r3, r3, #2
 800106c:	61d3      	str	r3, [r2, #28]
 800106e:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <HAL_TIM_Base_MspInit+0x90>)
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2100      	movs	r1, #0
 800107e:	201d      	movs	r0, #29
 8001080:	f000 fa05 	bl	800148e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001084:	201d      	movs	r0, #29
 8001086:	f000 fa1e 	bl	80014c6 <HAL_NVIC_EnableIRQ>
}
 800108a:	bf00      	nop
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40012c00 	.word	0x40012c00
 8001098:	40021000 	.word	0x40021000
 800109c:	40000400 	.word	0x40000400

080010a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a10      	ldr	r2, [pc, #64]	; (80010fc <HAL_TIM_MspPostInit+0x5c>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d118      	bne.n	80010f2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <HAL_TIM_MspPostInit+0x60>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a0e      	ldr	r2, [pc, #56]	; (8001100 <HAL_TIM_MspPostInit+0x60>)
 80010c6:	f043 0304 	orr.w	r3, r3, #4
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <HAL_TIM_MspPostInit+0x60>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f003 0304 	and.w	r3, r3, #4
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80010d8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80010dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2302      	movs	r3, #2
 80010e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 0310 	add.w	r3, r7, #16
 80010ea:	4619      	mov	r1, r3
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <HAL_TIM_MspPostInit+0x64>)
 80010ee:	f000 fa7b 	bl	80015e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80010f2:	bf00      	nop
 80010f4:	3720      	adds	r7, #32
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40012c00 	.word	0x40012c00
 8001100:	40021000 	.word	0x40021000
 8001104:	40010800 	.word	0x40010800

08001108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800110c:	e7fe      	b.n	800110c <NMI_Handler+0x4>

0800110e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <HardFault_Handler+0x4>

08001114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <MemManage_Handler+0x4>

0800111a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <BusFault_Handler+0x4>

08001120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <UsageFault_Handler+0x4>

08001126 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr

08001132 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr

0800113e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr

0800114a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800114e:	f000 f889 	bl	8001264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <TIM3_IRQHandler+0x10>)
 800115e:	f002 fb0f 	bl	8003780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	2000003c 	.word	0x2000003c

0800116c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001170:	4802      	ldr	r0, [pc, #8]	; (800117c <SPI1_IRQHandler+0x10>)
 8001172:	f001 fd55 	bl	8002c20 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200000ec 	.word	0x200000ec

08001180 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800118c:	480c      	ldr	r0, [pc, #48]	; (80011c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800118e:	490d      	ldr	r1, [pc, #52]	; (80011c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001190:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001194:	e002      	b.n	800119c <LoopCopyDataInit>

08001196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119a:	3304      	adds	r3, #4

0800119c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800119c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a0:	d3f9      	bcc.n	8001196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a2:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011a4:	4c0a      	ldr	r4, [pc, #40]	; (80011d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a8:	e001      	b.n	80011ae <LoopFillZerobss>

080011aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ac:	3204      	adds	r2, #4

080011ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b0:	d3fb      	bcc.n	80011aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011b2:	f7ff ffe5 	bl	8001180 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011b6:	f003 f8eb 	bl	8004390 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ba:	f7fe ffc7 	bl	800014c <main>
  bx lr
 80011be:	4770      	bx	lr
  ldr r0, =_sdata
 80011c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80011c8:	08004444 	.word	0x08004444
  ldr r2, =_sbss
 80011cc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80011d0:	20000190 	.word	0x20000190

080011d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011d4:	e7fe      	b.n	80011d4 <ADC1_2_IRQHandler>
	...

080011d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <HAL_Init+0x28>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a07      	ldr	r2, [pc, #28]	; (8001200 <HAL_Init+0x28>)
 80011e2:	f043 0310 	orr.w	r3, r3, #16
 80011e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e8:	2003      	movs	r0, #3
 80011ea:	f000 f945 	bl	8001478 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ee:	2000      	movs	r0, #0
 80011f0:	f000 f808 	bl	8001204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f4:	f7ff fe92 	bl	8000f1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40022000 	.word	0x40022000

08001204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_InitTick+0x54>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_InitTick+0x58>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121a:	fbb3 f3f1 	udiv	r3, r3, r1
 800121e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f95d 	bl	80014e2 <HAL_SYSTICK_Config>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e00e      	b.n	8001250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b0f      	cmp	r3, #15
 8001236:	d80a      	bhi.n	800124e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001238:	2200      	movs	r2, #0
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f000 f925 	bl	800148e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001244:	4a06      	ldr	r2, [pc, #24]	; (8001260 <HAL_InitTick+0x5c>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	e000      	b.n	8001250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000008 	.word	0x20000008
 800125c:	20000010 	.word	0x20000010
 8001260:	2000000c 	.word	0x2000000c

08001264 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <HAL_IncTick+0x1c>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4b05      	ldr	r3, [pc, #20]	; (8001284 <HAL_IncTick+0x20>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4413      	add	r3, r2
 8001274:	4a03      	ldr	r2, [pc, #12]	; (8001284 <HAL_IncTick+0x20>)
 8001276:	6013      	str	r3, [r2, #0]
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	20000010 	.word	0x20000010
 8001284:	2000018c 	.word	0x2000018c

08001288 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return uwTick;
 800128c:	4b02      	ldr	r3, [pc, #8]	; (8001298 <HAL_GetTick+0x10>)
 800128e:	681b      	ldr	r3, [r3, #0]
}
 8001290:	4618      	mov	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	2000018c 	.word	0x2000018c

0800129c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a4:	f7ff fff0 	bl	8001288 <HAL_GetTick>
 80012a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b4:	d005      	beq.n	80012c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <HAL_Delay+0x40>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	461a      	mov	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4413      	add	r3, r2
 80012c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012c2:	bf00      	nop
 80012c4:	f7ff ffe0 	bl	8001288 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d8f7      	bhi.n	80012c4 <HAL_Delay+0x28>
  {
  }
}
 80012d4:	bf00      	nop
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000010 	.word	0x20000010

080012e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012fc:	4013      	ands	r3, r2
 80012fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001308:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800130c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001312:	4a04      	ldr	r2, [pc, #16]	; (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	60d3      	str	r3, [r2, #12]
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800132c:	4b04      	ldr	r3, [pc, #16]	; (8001340 <__NVIC_GetPriorityGrouping+0x18>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	0a1b      	lsrs	r3, r3, #8
 8001332:	f003 0307 	and.w	r3, r3, #7
}
 8001336:	4618      	mov	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	2b00      	cmp	r3, #0
 8001354:	db0b      	blt.n	800136e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	f003 021f 	and.w	r2, r3, #31
 800135c:	4906      	ldr	r1, [pc, #24]	; (8001378 <__NVIC_EnableIRQ+0x34>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	095b      	lsrs	r3, r3, #5
 8001364:	2001      	movs	r0, #1
 8001366:	fa00 f202 	lsl.w	r2, r0, r2
 800136a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	e000e100 	.word	0xe000e100

0800137c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	6039      	str	r1, [r7, #0]
 8001386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	2b00      	cmp	r3, #0
 800138e:	db0a      	blt.n	80013a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	b2da      	uxtb	r2, r3
 8001394:	490c      	ldr	r1, [pc, #48]	; (80013c8 <__NVIC_SetPriority+0x4c>)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	0112      	lsls	r2, r2, #4
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	440b      	add	r3, r1
 80013a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a4:	e00a      	b.n	80013bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4908      	ldr	r1, [pc, #32]	; (80013cc <__NVIC_SetPriority+0x50>)
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	3b04      	subs	r3, #4
 80013b4:	0112      	lsls	r2, r2, #4
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	440b      	add	r3, r1
 80013ba:	761a      	strb	r2, [r3, #24]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000e100 	.word	0xe000e100
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b089      	sub	sp, #36	; 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f1c3 0307 	rsb	r3, r3, #7
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	bf28      	it	cs
 80013ee:	2304      	movcs	r3, #4
 80013f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3304      	adds	r3, #4
 80013f6:	2b06      	cmp	r3, #6
 80013f8:	d902      	bls.n	8001400 <NVIC_EncodePriority+0x30>
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3b03      	subs	r3, #3
 80013fe:	e000      	b.n	8001402 <NVIC_EncodePriority+0x32>
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	f04f 32ff 	mov.w	r2, #4294967295
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43da      	mvns	r2, r3
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	401a      	ands	r2, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001418:	f04f 31ff 	mov.w	r1, #4294967295
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	43d9      	mvns	r1, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	4313      	orrs	r3, r2
         );
}
 800142a:	4618      	mov	r0, r3
 800142c:	3724      	adds	r7, #36	; 0x24
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr

08001434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001444:	d301      	bcc.n	800144a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001446:	2301      	movs	r3, #1
 8001448:	e00f      	b.n	800146a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <SysTick_Config+0x40>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001452:	210f      	movs	r1, #15
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	f7ff ff90 	bl	800137c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <SysTick_Config+0x40>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <SysTick_Config+0x40>)
 8001464:	2207      	movs	r2, #7
 8001466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	e000e010 	.word	0xe000e010

08001478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff ff2d 	bl	80012e0 <__NVIC_SetPriorityGrouping>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800148e:	b580      	push	{r7, lr}
 8001490:	b086      	sub	sp, #24
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
 800149a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a0:	f7ff ff42 	bl	8001328 <__NVIC_GetPriorityGrouping>
 80014a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	68b9      	ldr	r1, [r7, #8]
 80014aa:	6978      	ldr	r0, [r7, #20]
 80014ac:	f7ff ff90 	bl	80013d0 <NVIC_EncodePriority>
 80014b0:	4602      	mov	r2, r0
 80014b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b6:	4611      	mov	r1, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff5f 	bl	800137c <__NVIC_SetPriority>
}
 80014be:	bf00      	nop
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff35 	bl	8001344 <__NVIC_EnableIRQ>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ffa2 	bl	8001434 <SysTick_Config>
 80014f0:	4603      	mov	r3, r0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800150e:	2b02      	cmp	r3, #2
 8001510:	d005      	beq.n	800151e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2204      	movs	r2, #4
 8001516:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	73fb      	strb	r3, [r7, #15]
 800151c:	e051      	b.n	80015c2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f022 020e 	bic.w	r2, r2, #14
 800152c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 0201 	bic.w	r2, r2, #1
 800153c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a22      	ldr	r2, [pc, #136]	; (80015cc <HAL_DMA_Abort_IT+0xd0>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d029      	beq.n	800159c <HAL_DMA_Abort_IT+0xa0>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a20      	ldr	r2, [pc, #128]	; (80015d0 <HAL_DMA_Abort_IT+0xd4>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d022      	beq.n	8001598 <HAL_DMA_Abort_IT+0x9c>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a1f      	ldr	r2, [pc, #124]	; (80015d4 <HAL_DMA_Abort_IT+0xd8>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d01a      	beq.n	8001592 <HAL_DMA_Abort_IT+0x96>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a1d      	ldr	r2, [pc, #116]	; (80015d8 <HAL_DMA_Abort_IT+0xdc>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d012      	beq.n	800158c <HAL_DMA_Abort_IT+0x90>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a1c      	ldr	r2, [pc, #112]	; (80015dc <HAL_DMA_Abort_IT+0xe0>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d00a      	beq.n	8001586 <HAL_DMA_Abort_IT+0x8a>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a1a      	ldr	r2, [pc, #104]	; (80015e0 <HAL_DMA_Abort_IT+0xe4>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d102      	bne.n	8001580 <HAL_DMA_Abort_IT+0x84>
 800157a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800157e:	e00e      	b.n	800159e <HAL_DMA_Abort_IT+0xa2>
 8001580:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001584:	e00b      	b.n	800159e <HAL_DMA_Abort_IT+0xa2>
 8001586:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800158a:	e008      	b.n	800159e <HAL_DMA_Abort_IT+0xa2>
 800158c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001590:	e005      	b.n	800159e <HAL_DMA_Abort_IT+0xa2>
 8001592:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001596:	e002      	b.n	800159e <HAL_DMA_Abort_IT+0xa2>
 8001598:	2310      	movs	r3, #16
 800159a:	e000      	b.n	800159e <HAL_DMA_Abort_IT+0xa2>
 800159c:	2301      	movs	r3, #1
 800159e:	4a11      	ldr	r2, [pc, #68]	; (80015e4 <HAL_DMA_Abort_IT+0xe8>)
 80015a0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2201      	movs	r2, #1
 80015a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	4798      	blx	r3
    } 
  }
  return status;
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40020008 	.word	0x40020008
 80015d0:	4002001c 	.word	0x4002001c
 80015d4:	40020030 	.word	0x40020030
 80015d8:	40020044 	.word	0x40020044
 80015dc:	40020058 	.word	0x40020058
 80015e0:	4002006c 	.word	0x4002006c
 80015e4:	40020000 	.word	0x40020000

080015e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b08b      	sub	sp, #44	; 0x2c
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015f2:	2300      	movs	r3, #0
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015f6:	2300      	movs	r3, #0
 80015f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015fa:	e127      	b.n	800184c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015fc:	2201      	movs	r2, #1
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	69fa      	ldr	r2, [r7, #28]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	429a      	cmp	r2, r3
 8001616:	f040 8116 	bne.w	8001846 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b12      	cmp	r3, #18
 8001620:	d034      	beq.n	800168c <HAL_GPIO_Init+0xa4>
 8001622:	2b12      	cmp	r3, #18
 8001624:	d80d      	bhi.n	8001642 <HAL_GPIO_Init+0x5a>
 8001626:	2b02      	cmp	r3, #2
 8001628:	d02b      	beq.n	8001682 <HAL_GPIO_Init+0x9a>
 800162a:	2b02      	cmp	r3, #2
 800162c:	d804      	bhi.n	8001638 <HAL_GPIO_Init+0x50>
 800162e:	2b00      	cmp	r3, #0
 8001630:	d031      	beq.n	8001696 <HAL_GPIO_Init+0xae>
 8001632:	2b01      	cmp	r3, #1
 8001634:	d01c      	beq.n	8001670 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001636:	e048      	b.n	80016ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001638:	2b03      	cmp	r3, #3
 800163a:	d043      	beq.n	80016c4 <HAL_GPIO_Init+0xdc>
 800163c:	2b11      	cmp	r3, #17
 800163e:	d01b      	beq.n	8001678 <HAL_GPIO_Init+0x90>
          break;
 8001640:	e043      	b.n	80016ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001642:	4a89      	ldr	r2, [pc, #548]	; (8001868 <HAL_GPIO_Init+0x280>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d026      	beq.n	8001696 <HAL_GPIO_Init+0xae>
 8001648:	4a87      	ldr	r2, [pc, #540]	; (8001868 <HAL_GPIO_Init+0x280>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d806      	bhi.n	800165c <HAL_GPIO_Init+0x74>
 800164e:	4a87      	ldr	r2, [pc, #540]	; (800186c <HAL_GPIO_Init+0x284>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d020      	beq.n	8001696 <HAL_GPIO_Init+0xae>
 8001654:	4a86      	ldr	r2, [pc, #536]	; (8001870 <HAL_GPIO_Init+0x288>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d01d      	beq.n	8001696 <HAL_GPIO_Init+0xae>
          break;
 800165a:	e036      	b.n	80016ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800165c:	4a85      	ldr	r2, [pc, #532]	; (8001874 <HAL_GPIO_Init+0x28c>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d019      	beq.n	8001696 <HAL_GPIO_Init+0xae>
 8001662:	4a85      	ldr	r2, [pc, #532]	; (8001878 <HAL_GPIO_Init+0x290>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d016      	beq.n	8001696 <HAL_GPIO_Init+0xae>
 8001668:	4a84      	ldr	r2, [pc, #528]	; (800187c <HAL_GPIO_Init+0x294>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d013      	beq.n	8001696 <HAL_GPIO_Init+0xae>
          break;
 800166e:	e02c      	b.n	80016ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	623b      	str	r3, [r7, #32]
          break;
 8001676:	e028      	b.n	80016ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	3304      	adds	r3, #4
 800167e:	623b      	str	r3, [r7, #32]
          break;
 8001680:	e023      	b.n	80016ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	3308      	adds	r3, #8
 8001688:	623b      	str	r3, [r7, #32]
          break;
 800168a:	e01e      	b.n	80016ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	330c      	adds	r3, #12
 8001692:	623b      	str	r3, [r7, #32]
          break;
 8001694:	e019      	b.n	80016ca <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d102      	bne.n	80016a4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800169e:	2304      	movs	r3, #4
 80016a0:	623b      	str	r3, [r7, #32]
          break;
 80016a2:	e012      	b.n	80016ca <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d105      	bne.n	80016b8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016ac:	2308      	movs	r3, #8
 80016ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69fa      	ldr	r2, [r7, #28]
 80016b4:	611a      	str	r2, [r3, #16]
          break;
 80016b6:	e008      	b.n	80016ca <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016b8:	2308      	movs	r3, #8
 80016ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	69fa      	ldr	r2, [r7, #28]
 80016c0:	615a      	str	r2, [r3, #20]
          break;
 80016c2:	e002      	b.n	80016ca <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016c4:	2300      	movs	r3, #0
 80016c6:	623b      	str	r3, [r7, #32]
          break;
 80016c8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	2bff      	cmp	r3, #255	; 0xff
 80016ce:	d801      	bhi.n	80016d4 <HAL_GPIO_Init+0xec>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	e001      	b.n	80016d8 <HAL_GPIO_Init+0xf0>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3304      	adds	r3, #4
 80016d8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	2bff      	cmp	r3, #255	; 0xff
 80016de:	d802      	bhi.n	80016e6 <HAL_GPIO_Init+0xfe>
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	e002      	b.n	80016ec <HAL_GPIO_Init+0x104>
 80016e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e8:	3b08      	subs	r3, #8
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	210f      	movs	r1, #15
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	fa01 f303 	lsl.w	r3, r1, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	401a      	ands	r2, r3
 80016fe:	6a39      	ldr	r1, [r7, #32]
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	fa01 f303 	lsl.w	r3, r1, r3
 8001706:	431a      	orrs	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001714:	2b00      	cmp	r3, #0
 8001716:	f000 8096 	beq.w	8001846 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800171a:	4b59      	ldr	r3, [pc, #356]	; (8001880 <HAL_GPIO_Init+0x298>)
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	4a58      	ldr	r2, [pc, #352]	; (8001880 <HAL_GPIO_Init+0x298>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6193      	str	r3, [r2, #24]
 8001726:	4b56      	ldr	r3, [pc, #344]	; (8001880 <HAL_GPIO_Init+0x298>)
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001732:	4a54      	ldr	r2, [pc, #336]	; (8001884 <HAL_GPIO_Init+0x29c>)
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	089b      	lsrs	r3, r3, #2
 8001738:	3302      	adds	r3, #2
 800173a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	f003 0303 	and.w	r3, r3, #3
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	220f      	movs	r2, #15
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	4013      	ands	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a4b      	ldr	r2, [pc, #300]	; (8001888 <HAL_GPIO_Init+0x2a0>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d013      	beq.n	8001786 <HAL_GPIO_Init+0x19e>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a4a      	ldr	r2, [pc, #296]	; (800188c <HAL_GPIO_Init+0x2a4>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d00d      	beq.n	8001782 <HAL_GPIO_Init+0x19a>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a49      	ldr	r2, [pc, #292]	; (8001890 <HAL_GPIO_Init+0x2a8>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d007      	beq.n	800177e <HAL_GPIO_Init+0x196>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a48      	ldr	r2, [pc, #288]	; (8001894 <HAL_GPIO_Init+0x2ac>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d101      	bne.n	800177a <HAL_GPIO_Init+0x192>
 8001776:	2303      	movs	r3, #3
 8001778:	e006      	b.n	8001788 <HAL_GPIO_Init+0x1a0>
 800177a:	2304      	movs	r3, #4
 800177c:	e004      	b.n	8001788 <HAL_GPIO_Init+0x1a0>
 800177e:	2302      	movs	r3, #2
 8001780:	e002      	b.n	8001788 <HAL_GPIO_Init+0x1a0>
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <HAL_GPIO_Init+0x1a0>
 8001786:	2300      	movs	r3, #0
 8001788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800178a:	f002 0203 	and.w	r2, r2, #3
 800178e:	0092      	lsls	r2, r2, #2
 8001790:	4093      	lsls	r3, r2
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	4313      	orrs	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001798:	493a      	ldr	r1, [pc, #232]	; (8001884 <HAL_GPIO_Init+0x29c>)
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	089b      	lsrs	r3, r3, #2
 800179e:	3302      	adds	r3, #2
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017b2:	4b39      	ldr	r3, [pc, #228]	; (8001898 <HAL_GPIO_Init+0x2b0>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	4938      	ldr	r1, [pc, #224]	; (8001898 <HAL_GPIO_Init+0x2b0>)
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	600b      	str	r3, [r1, #0]
 80017be:	e006      	b.n	80017ce <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017c0:	4b35      	ldr	r3, [pc, #212]	; (8001898 <HAL_GPIO_Init+0x2b0>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	4933      	ldr	r1, [pc, #204]	; (8001898 <HAL_GPIO_Init+0x2b0>)
 80017ca:	4013      	ands	r3, r2
 80017cc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d006      	beq.n	80017e8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017da:	4b2f      	ldr	r3, [pc, #188]	; (8001898 <HAL_GPIO_Init+0x2b0>)
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	492e      	ldr	r1, [pc, #184]	; (8001898 <HAL_GPIO_Init+0x2b0>)
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	604b      	str	r3, [r1, #4]
 80017e6:	e006      	b.n	80017f6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017e8:	4b2b      	ldr	r3, [pc, #172]	; (8001898 <HAL_GPIO_Init+0x2b0>)
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	43db      	mvns	r3, r3
 80017f0:	4929      	ldr	r1, [pc, #164]	; (8001898 <HAL_GPIO_Init+0x2b0>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d006      	beq.n	8001810 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001802:	4b25      	ldr	r3, [pc, #148]	; (8001898 <HAL_GPIO_Init+0x2b0>)
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	4924      	ldr	r1, [pc, #144]	; (8001898 <HAL_GPIO_Init+0x2b0>)
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	608b      	str	r3, [r1, #8]
 800180e:	e006      	b.n	800181e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001810:	4b21      	ldr	r3, [pc, #132]	; (8001898 <HAL_GPIO_Init+0x2b0>)
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	43db      	mvns	r3, r3
 8001818:	491f      	ldr	r1, [pc, #124]	; (8001898 <HAL_GPIO_Init+0x2b0>)
 800181a:	4013      	ands	r3, r2
 800181c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d006      	beq.n	8001838 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800182a:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <HAL_GPIO_Init+0x2b0>)
 800182c:	68da      	ldr	r2, [r3, #12]
 800182e:	491a      	ldr	r1, [pc, #104]	; (8001898 <HAL_GPIO_Init+0x2b0>)
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	4313      	orrs	r3, r2
 8001834:	60cb      	str	r3, [r1, #12]
 8001836:	e006      	b.n	8001846 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001838:	4b17      	ldr	r3, [pc, #92]	; (8001898 <HAL_GPIO_Init+0x2b0>)
 800183a:	68da      	ldr	r2, [r3, #12]
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	43db      	mvns	r3, r3
 8001840:	4915      	ldr	r1, [pc, #84]	; (8001898 <HAL_GPIO_Init+0x2b0>)
 8001842:	4013      	ands	r3, r2
 8001844:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	3301      	adds	r3, #1
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	fa22 f303 	lsr.w	r3, r2, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	f47f aed0 	bne.w	80015fc <HAL_GPIO_Init+0x14>
  }
}
 800185c:	bf00      	nop
 800185e:	372c      	adds	r7, #44	; 0x2c
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	10210000 	.word	0x10210000
 800186c:	10110000 	.word	0x10110000
 8001870:	10120000 	.word	0x10120000
 8001874:	10310000 	.word	0x10310000
 8001878:	10320000 	.word	0x10320000
 800187c:	10220000 	.word	0x10220000
 8001880:	40021000 	.word	0x40021000
 8001884:	40010000 	.word	0x40010000
 8001888:	40010800 	.word	0x40010800
 800188c:	40010c00 	.word	0x40010c00
 8001890:	40011000 	.word	0x40011000
 8001894:	40011400 	.word	0x40011400
 8001898:	40010400 	.word	0x40010400

0800189c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	807b      	strh	r3, [r7, #2]
 80018a8:	4613      	mov	r3, r2
 80018aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018ac:	787b      	ldrb	r3, [r7, #1]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018b2:	887a      	ldrh	r2, [r7, #2]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018b8:	e003      	b.n	80018c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018ba:	887b      	ldrh	r3, [r7, #2]
 80018bc:	041a      	lsls	r2, r3, #16
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	611a      	str	r2, [r3, #16]
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018de:	887a      	ldrh	r2, [r7, #2]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4013      	ands	r3, r2
 80018e4:	041a      	lsls	r2, r3, #16
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	43d9      	mvns	r1, r3
 80018ea:	887b      	ldrh	r3, [r7, #2]
 80018ec:	400b      	ands	r3, r1
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	611a      	str	r2, [r3, #16]
}
 80018f4:	bf00      	nop
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr
	...

08001900 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e26c      	b.n	8001dec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 8087 	beq.w	8001a2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001920:	4b92      	ldr	r3, [pc, #584]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 030c 	and.w	r3, r3, #12
 8001928:	2b04      	cmp	r3, #4
 800192a:	d00c      	beq.n	8001946 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800192c:	4b8f      	ldr	r3, [pc, #572]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 030c 	and.w	r3, r3, #12
 8001934:	2b08      	cmp	r3, #8
 8001936:	d112      	bne.n	800195e <HAL_RCC_OscConfig+0x5e>
 8001938:	4b8c      	ldr	r3, [pc, #560]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001944:	d10b      	bne.n	800195e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001946:	4b89      	ldr	r3, [pc, #548]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d06c      	beq.n	8001a2c <HAL_RCC_OscConfig+0x12c>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d168      	bne.n	8001a2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e246      	b.n	8001dec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001966:	d106      	bne.n	8001976 <HAL_RCC_OscConfig+0x76>
 8001968:	4b80      	ldr	r3, [pc, #512]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a7f      	ldr	r2, [pc, #508]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 800196e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001972:	6013      	str	r3, [r2, #0]
 8001974:	e02e      	b.n	80019d4 <HAL_RCC_OscConfig+0xd4>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10c      	bne.n	8001998 <HAL_RCC_OscConfig+0x98>
 800197e:	4b7b      	ldr	r3, [pc, #492]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a7a      	ldr	r2, [pc, #488]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	4b78      	ldr	r3, [pc, #480]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a77      	ldr	r2, [pc, #476]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001990:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	e01d      	b.n	80019d4 <HAL_RCC_OscConfig+0xd4>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019a0:	d10c      	bne.n	80019bc <HAL_RCC_OscConfig+0xbc>
 80019a2:	4b72      	ldr	r3, [pc, #456]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a71      	ldr	r2, [pc, #452]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 80019a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	4b6f      	ldr	r3, [pc, #444]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a6e      	ldr	r2, [pc, #440]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 80019b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	e00b      	b.n	80019d4 <HAL_RCC_OscConfig+0xd4>
 80019bc:	4b6b      	ldr	r3, [pc, #428]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a6a      	ldr	r2, [pc, #424]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 80019c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	4b68      	ldr	r3, [pc, #416]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a67      	ldr	r2, [pc, #412]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 80019ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d013      	beq.n	8001a04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019dc:	f7ff fc54 	bl	8001288 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e4:	f7ff fc50 	bl	8001288 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b64      	cmp	r3, #100	; 0x64
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e1fa      	b.n	8001dec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f6:	4b5d      	ldr	r3, [pc, #372]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0f0      	beq.n	80019e4 <HAL_RCC_OscConfig+0xe4>
 8001a02:	e014      	b.n	8001a2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a04:	f7ff fc40 	bl	8001288 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fc3c 	bl	8001288 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e1e6      	b.n	8001dec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a1e:	4b53      	ldr	r3, [pc, #332]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x10c>
 8001a2a:	e000      	b.n	8001a2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d063      	beq.n	8001b02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a3a:	4b4c      	ldr	r3, [pc, #304]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 030c 	and.w	r3, r3, #12
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d00b      	beq.n	8001a5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a46:	4b49      	ldr	r3, [pc, #292]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 030c 	and.w	r3, r3, #12
 8001a4e:	2b08      	cmp	r3, #8
 8001a50:	d11c      	bne.n	8001a8c <HAL_RCC_OscConfig+0x18c>
 8001a52:	4b46      	ldr	r3, [pc, #280]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d116      	bne.n	8001a8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a5e:	4b43      	ldr	r3, [pc, #268]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d005      	beq.n	8001a76 <HAL_RCC_OscConfig+0x176>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d001      	beq.n	8001a76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e1ba      	b.n	8001dec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a76:	4b3d      	ldr	r3, [pc, #244]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	4939      	ldr	r1, [pc, #228]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a8a:	e03a      	b.n	8001b02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d020      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a94:	4b36      	ldr	r3, [pc, #216]	; (8001b70 <HAL_RCC_OscConfig+0x270>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9a:	f7ff fbf5 	bl	8001288 <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa2:	f7ff fbf1 	bl	8001288 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e19b      	b.n	8001dec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab4:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0f0      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac0:	4b2a      	ldr	r3, [pc, #168]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	4927      	ldr	r1, [pc, #156]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	600b      	str	r3, [r1, #0]
 8001ad4:	e015      	b.n	8001b02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ad6:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <HAL_RCC_OscConfig+0x270>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7ff fbd4 	bl	8001288 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae4:	f7ff fbd0 	bl	8001288 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e17a      	b.n	8001dec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001af6:	4b1d      	ldr	r3, [pc, #116]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d03a      	beq.n	8001b84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d019      	beq.n	8001b4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b16:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1c:	f7ff fbb4 	bl	8001288 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b24:	f7ff fbb0 	bl	8001288 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e15a      	b.n	8001dec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b36:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b42:	2001      	movs	r0, #1
 8001b44:	f000 faa8 	bl	8002098 <RCC_Delay>
 8001b48:	e01c      	b.n	8001b84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b50:	f7ff fb9a 	bl	8001288 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b56:	e00f      	b.n	8001b78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b58:	f7ff fb96 	bl	8001288 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d908      	bls.n	8001b78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e140      	b.n	8001dec <HAL_RCC_OscConfig+0x4ec>
 8001b6a:	bf00      	nop
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	42420000 	.word	0x42420000
 8001b74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b78:	4b9e      	ldr	r3, [pc, #632]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1e9      	bne.n	8001b58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 80a6 	beq.w	8001cde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b92:	2300      	movs	r3, #0
 8001b94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b96:	4b97      	ldr	r3, [pc, #604]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10d      	bne.n	8001bbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba2:	4b94      	ldr	r3, [pc, #592]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	4a93      	ldr	r2, [pc, #588]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bac:	61d3      	str	r3, [r2, #28]
 8001bae:	4b91      	ldr	r3, [pc, #580]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bbe:	4b8e      	ldr	r3, [pc, #568]	; (8001df8 <HAL_RCC_OscConfig+0x4f8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d118      	bne.n	8001bfc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bca:	4b8b      	ldr	r3, [pc, #556]	; (8001df8 <HAL_RCC_OscConfig+0x4f8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a8a      	ldr	r2, [pc, #552]	; (8001df8 <HAL_RCC_OscConfig+0x4f8>)
 8001bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bd6:	f7ff fb57 	bl	8001288 <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bde:	f7ff fb53 	bl	8001288 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b64      	cmp	r3, #100	; 0x64
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e0fd      	b.n	8001dec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf0:	4b81      	ldr	r3, [pc, #516]	; (8001df8 <HAL_RCC_OscConfig+0x4f8>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0f0      	beq.n	8001bde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d106      	bne.n	8001c12 <HAL_RCC_OscConfig+0x312>
 8001c04:	4b7b      	ldr	r3, [pc, #492]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	4a7a      	ldr	r2, [pc, #488]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	6213      	str	r3, [r2, #32]
 8001c10:	e02d      	b.n	8001c6e <HAL_RCC_OscConfig+0x36e>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10c      	bne.n	8001c34 <HAL_RCC_OscConfig+0x334>
 8001c1a:	4b76      	ldr	r3, [pc, #472]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	4a75      	ldr	r2, [pc, #468]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001c20:	f023 0301 	bic.w	r3, r3, #1
 8001c24:	6213      	str	r3, [r2, #32]
 8001c26:	4b73      	ldr	r3, [pc, #460]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	4a72      	ldr	r2, [pc, #456]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	f023 0304 	bic.w	r3, r3, #4
 8001c30:	6213      	str	r3, [r2, #32]
 8001c32:	e01c      	b.n	8001c6e <HAL_RCC_OscConfig+0x36e>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	2b05      	cmp	r3, #5
 8001c3a:	d10c      	bne.n	8001c56 <HAL_RCC_OscConfig+0x356>
 8001c3c:	4b6d      	ldr	r3, [pc, #436]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	4a6c      	ldr	r2, [pc, #432]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001c42:	f043 0304 	orr.w	r3, r3, #4
 8001c46:	6213      	str	r3, [r2, #32]
 8001c48:	4b6a      	ldr	r3, [pc, #424]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	4a69      	ldr	r2, [pc, #420]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6213      	str	r3, [r2, #32]
 8001c54:	e00b      	b.n	8001c6e <HAL_RCC_OscConfig+0x36e>
 8001c56:	4b67      	ldr	r3, [pc, #412]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	4a66      	ldr	r2, [pc, #408]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001c5c:	f023 0301 	bic.w	r3, r3, #1
 8001c60:	6213      	str	r3, [r2, #32]
 8001c62:	4b64      	ldr	r3, [pc, #400]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	4a63      	ldr	r2, [pc, #396]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001c68:	f023 0304 	bic.w	r3, r3, #4
 8001c6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d015      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c76:	f7ff fb07 	bl	8001288 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c7c:	e00a      	b.n	8001c94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c7e:	f7ff fb03 	bl	8001288 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e0ab      	b.n	8001dec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c94:	4b57      	ldr	r3, [pc, #348]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0ee      	beq.n	8001c7e <HAL_RCC_OscConfig+0x37e>
 8001ca0:	e014      	b.n	8001ccc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca2:	f7ff faf1 	bl	8001288 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca8:	e00a      	b.n	8001cc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001caa:	f7ff faed 	bl	8001288 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e095      	b.n	8001dec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc0:	4b4c      	ldr	r3, [pc, #304]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1ee      	bne.n	8001caa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ccc:	7dfb      	ldrb	r3, [r7, #23]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d105      	bne.n	8001cde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cd2:	4b48      	ldr	r3, [pc, #288]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	4a47      	ldr	r2, [pc, #284]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001cd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 8081 	beq.w	8001dea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ce8:	4b42      	ldr	r3, [pc, #264]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 030c 	and.w	r3, r3, #12
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d061      	beq.n	8001db8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d146      	bne.n	8001d8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfc:	4b3f      	ldr	r3, [pc, #252]	; (8001dfc <HAL_RCC_OscConfig+0x4fc>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d02:	f7ff fac1 	bl	8001288 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0a:	f7ff fabd 	bl	8001288 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e067      	b.n	8001dec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d1c:	4b35      	ldr	r3, [pc, #212]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1f0      	bne.n	8001d0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d30:	d108      	bne.n	8001d44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d32:	4b30      	ldr	r3, [pc, #192]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	492d      	ldr	r1, [pc, #180]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d44:	4b2b      	ldr	r3, [pc, #172]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a19      	ldr	r1, [r3, #32]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	430b      	orrs	r3, r1
 8001d56:	4927      	ldr	r1, [pc, #156]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d5c:	4b27      	ldr	r3, [pc, #156]	; (8001dfc <HAL_RCC_OscConfig+0x4fc>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d62:	f7ff fa91 	bl	8001288 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d6a:	f7ff fa8d 	bl	8001288 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e037      	b.n	8001dec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d7c:	4b1d      	ldr	r3, [pc, #116]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0f0      	beq.n	8001d6a <HAL_RCC_OscConfig+0x46a>
 8001d88:	e02f      	b.n	8001dea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	; (8001dfc <HAL_RCC_OscConfig+0x4fc>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7ff fa7a 	bl	8001288 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d98:	f7ff fa76 	bl	8001288 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e020      	b.n	8001dec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001daa:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0x498>
 8001db6:	e018      	b.n	8001dea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	69db      	ldr	r3, [r3, #28]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d101      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e013      	b.n	8001dec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d106      	bne.n	8001de6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d001      	beq.n	8001dea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e000      	b.n	8001dec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40007000 	.word	0x40007000
 8001dfc:	42420060 	.word	0x42420060

08001e00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e0d0      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e14:	4b6a      	ldr	r3, [pc, #424]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d910      	bls.n	8001e44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e22:	4b67      	ldr	r3, [pc, #412]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f023 0207 	bic.w	r2, r3, #7
 8001e2a:	4965      	ldr	r1, [pc, #404]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e32:	4b63      	ldr	r3, [pc, #396]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d001      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e0b8      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d020      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d005      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e5c:	4b59      	ldr	r3, [pc, #356]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	4a58      	ldr	r2, [pc, #352]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0308 	and.w	r3, r3, #8
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e74:	4b53      	ldr	r3, [pc, #332]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	4a52      	ldr	r2, [pc, #328]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e80:	4b50      	ldr	r3, [pc, #320]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	494d      	ldr	r1, [pc, #308]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d040      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d107      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea6:	4b47      	ldr	r3, [pc, #284]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d115      	bne.n	8001ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e07f      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d107      	bne.n	8001ece <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ebe:	4b41      	ldr	r3, [pc, #260]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d109      	bne.n	8001ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e073      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ece:	4b3d      	ldr	r3, [pc, #244]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e06b      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ede:	4b39      	ldr	r3, [pc, #228]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f023 0203 	bic.w	r2, r3, #3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	4936      	ldr	r1, [pc, #216]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ef0:	f7ff f9ca 	bl	8001288 <HAL_GetTick>
 8001ef4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef6:	e00a      	b.n	8001f0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef8:	f7ff f9c6 	bl	8001288 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e053      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0e:	4b2d      	ldr	r3, [pc, #180]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 020c 	and.w	r2, r3, #12
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d1eb      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f20:	4b27      	ldr	r3, [pc, #156]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d210      	bcs.n	8001f50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2e:	4b24      	ldr	r3, [pc, #144]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 0207 	bic.w	r2, r3, #7
 8001f36:	4922      	ldr	r1, [pc, #136]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3e:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e032      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d008      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f5c:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	4916      	ldr	r1, [pc, #88]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d009      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f7a:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	490e      	ldr	r1, [pc, #56]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f8e:	f000 f821 	bl	8001fd4 <HAL_RCC_GetSysClockFreq>
 8001f92:	4601      	mov	r1, r0
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	091b      	lsrs	r3, r3, #4
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	4a0a      	ldr	r2, [pc, #40]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fa0:	5cd3      	ldrb	r3, [r2, r3]
 8001fa2:	fa21 f303 	lsr.w	r3, r1, r3
 8001fa6:	4a09      	ldr	r2, [pc, #36]	; (8001fcc <HAL_RCC_ClockConfig+0x1cc>)
 8001fa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <HAL_RCC_ClockConfig+0x1d0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff f928 	bl	8001204 <HAL_InitTick>

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40022000 	.word	0x40022000
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	0800442c 	.word	0x0800442c
 8001fcc:	20000008 	.word	0x20000008
 8001fd0:	2000000c 	.word	0x2000000c

08001fd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd4:	b490      	push	{r4, r7}
 8001fd6:	b08a      	sub	sp, #40	; 0x28
 8001fd8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fda:	4b2a      	ldr	r3, [pc, #168]	; (8002084 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001fdc:	1d3c      	adds	r4, r7, #4
 8001fde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fe0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fe4:	4b28      	ldr	r3, [pc, #160]	; (8002088 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61bb      	str	r3, [r7, #24]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ffe:	4b23      	ldr	r3, [pc, #140]	; (800208c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	2b04      	cmp	r3, #4
 800200c:	d002      	beq.n	8002014 <HAL_RCC_GetSysClockFreq+0x40>
 800200e:	2b08      	cmp	r3, #8
 8002010:	d003      	beq.n	800201a <HAL_RCC_GetSysClockFreq+0x46>
 8002012:	e02d      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002014:	4b1e      	ldr	r3, [pc, #120]	; (8002090 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002016:	623b      	str	r3, [r7, #32]
      break;
 8002018:	e02d      	b.n	8002076 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	0c9b      	lsrs	r3, r3, #18
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002026:	4413      	add	r3, r2
 8002028:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800202c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d013      	beq.n	8002060 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002038:	4b14      	ldr	r3, [pc, #80]	; (800208c <HAL_RCC_GetSysClockFreq+0xb8>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	0c5b      	lsrs	r3, r3, #17
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002046:	4413      	add	r3, r2
 8002048:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800204c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	4a0f      	ldr	r2, [pc, #60]	; (8002090 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002052:	fb02 f203 	mul.w	r2, r2, r3
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	fbb2 f3f3 	udiv	r3, r2, r3
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
 800205e:	e004      	b.n	800206a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	4a0c      	ldr	r2, [pc, #48]	; (8002094 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002064:	fb02 f303 	mul.w	r3, r2, r3
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	623b      	str	r3, [r7, #32]
      break;
 800206e:	e002      	b.n	8002076 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002070:	4b07      	ldr	r3, [pc, #28]	; (8002090 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002072:	623b      	str	r3, [r7, #32]
      break;
 8002074:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002076:	6a3b      	ldr	r3, [r7, #32]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3728      	adds	r7, #40	; 0x28
 800207c:	46bd      	mov	sp, r7
 800207e:	bc90      	pop	{r4, r7}
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	08004418 	.word	0x08004418
 8002088:	08004428 	.word	0x08004428
 800208c:	40021000 	.word	0x40021000
 8002090:	007a1200 	.word	0x007a1200
 8002094:	003d0900 	.word	0x003d0900

08002098 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020a0:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <RCC_Delay+0x34>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <RCC_Delay+0x38>)
 80020a6:	fba2 2303 	umull	r2, r3, r2, r3
 80020aa:	0a5b      	lsrs	r3, r3, #9
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	fb02 f303 	mul.w	r3, r2, r3
 80020b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020b4:	bf00      	nop
  }
  while (Delay --);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	1e5a      	subs	r2, r3, #1
 80020ba:	60fa      	str	r2, [r7, #12]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1f9      	bne.n	80020b4 <RCC_Delay+0x1c>
}
 80020c0:	bf00      	nop
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20000008 	.word	0x20000008
 80020d0:	10624dd3 	.word	0x10624dd3

080020d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e076      	b.n	80021d4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d108      	bne.n	8002100 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020f6:	d009      	beq.n	800210c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	61da      	str	r2, [r3, #28]
 80020fe:	e005      	b.n	800210c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d106      	bne.n	800212c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7fe ff1c 	bl	8000f64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2202      	movs	r2, #2
 8002130:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002142:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002154:	431a      	orrs	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	431a      	orrs	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800217c:	431a      	orrs	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002190:	ea42 0103 	orr.w	r1, r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	0c1a      	lsrs	r2, r3, #16
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f002 0204 	and.w	r2, r2, #4
 80021b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	69da      	ldr	r2, [r3, #28]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	603b      	str	r3, [r7, #0]
 80021e8:	4613      	mov	r3, r2
 80021ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021ec:	2300      	movs	r3, #0
 80021ee:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d101      	bne.n	80021fe <HAL_SPI_Transmit+0x22>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e126      	b.n	800244c <HAL_SPI_Transmit+0x270>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002206:	f7ff f83f 	bl	8001288 <HAL_GetTick>
 800220a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800220c:	88fb      	ldrh	r3, [r7, #6]
 800220e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b01      	cmp	r3, #1
 800221a:	d002      	beq.n	8002222 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800221c:	2302      	movs	r3, #2
 800221e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002220:	e10b      	b.n	800243a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d002      	beq.n	800222e <HAL_SPI_Transmit+0x52>
 8002228:	88fb      	ldrh	r3, [r7, #6]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d102      	bne.n	8002234 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002232:	e102      	b.n	800243a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2203      	movs	r2, #3
 8002238:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	88fa      	ldrh	r2, [r7, #6]
 800224c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	88fa      	ldrh	r2, [r7, #6]
 8002252:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800227a:	d10f      	bne.n	800229c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800228a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800229a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a6:	2b40      	cmp	r3, #64	; 0x40
 80022a8:	d007      	beq.n	80022ba <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022c2:	d14b      	bne.n	800235c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d002      	beq.n	80022d2 <HAL_SPI_Transmit+0xf6>
 80022cc:	8afb      	ldrh	r3, [r7, #22]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d13e      	bne.n	8002350 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	881a      	ldrh	r2, [r3, #0]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	1c9a      	adds	r2, r3, #2
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	3b01      	subs	r3, #1
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80022f6:	e02b      	b.n	8002350 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b02      	cmp	r3, #2
 8002304:	d112      	bne.n	800232c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	881a      	ldrh	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	1c9a      	adds	r2, r3, #2
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002320:	b29b      	uxth	r3, r3
 8002322:	3b01      	subs	r3, #1
 8002324:	b29a      	uxth	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	86da      	strh	r2, [r3, #54]	; 0x36
 800232a:	e011      	b.n	8002350 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800232c:	f7fe ffac 	bl	8001288 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d803      	bhi.n	8002344 <HAL_SPI_Transmit+0x168>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002342:	d102      	bne.n	800234a <HAL_SPI_Transmit+0x16e>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d102      	bne.n	8002350 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800234e:	e074      	b.n	800243a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002354:	b29b      	uxth	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1ce      	bne.n	80022f8 <HAL_SPI_Transmit+0x11c>
 800235a:	e04c      	b.n	80023f6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <HAL_SPI_Transmit+0x18e>
 8002364:	8afb      	ldrh	r3, [r7, #22]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d140      	bne.n	80023ec <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	330c      	adds	r3, #12
 8002374:	7812      	ldrb	r2, [r2, #0]
 8002376:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002386:	b29b      	uxth	r3, r3
 8002388:	3b01      	subs	r3, #1
 800238a:	b29a      	uxth	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002390:	e02c      	b.n	80023ec <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b02      	cmp	r3, #2
 800239e:	d113      	bne.n	80023c8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	330c      	adds	r3, #12
 80023aa:	7812      	ldrb	r2, [r2, #0]
 80023ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	1c5a      	adds	r2, r3, #1
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023bc:	b29b      	uxth	r3, r3
 80023be:	3b01      	subs	r3, #1
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	86da      	strh	r2, [r3, #54]	; 0x36
 80023c6:	e011      	b.n	80023ec <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023c8:	f7fe ff5e 	bl	8001288 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d803      	bhi.n	80023e0 <HAL_SPI_Transmit+0x204>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023de:	d102      	bne.n	80023e6 <HAL_SPI_Transmit+0x20a>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d102      	bne.n	80023ec <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80023ea:	e026      	b.n	800243a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1cd      	bne.n	8002392 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	6839      	ldr	r1, [r7, #0]
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 ff0a 	bl	8003214 <SPI_EndRxTxTransaction>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2220      	movs	r2, #32
 800240a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10a      	bne.n	800242a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002414:	2300      	movs	r3, #0
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	77fb      	strb	r3, [r7, #31]
 8002436:	e000      	b.n	800243a <HAL_SPI_Transmit+0x25e>
  }

error:
 8002438:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800244a:	7ffb      	ldrb	r3, [r7, #31]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3720      	adds	r7, #32
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af02      	add	r7, sp, #8
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	603b      	str	r3, [r7, #0]
 8002460:	4613      	mov	r3, r2
 8002462:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002464:	2300      	movs	r3, #0
 8002466:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002470:	d112      	bne.n	8002498 <HAL_SPI_Receive+0x44>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10e      	bne.n	8002498 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2204      	movs	r2, #4
 800247e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002482:	88fa      	ldrh	r2, [r7, #6]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	4613      	mov	r3, r2
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	68b9      	ldr	r1, [r7, #8]
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 f8f1 	bl	8002676 <HAL_SPI_TransmitReceive>
 8002494:	4603      	mov	r3, r0
 8002496:	e0ea      	b.n	800266e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d101      	bne.n	80024a6 <HAL_SPI_Receive+0x52>
 80024a2:	2302      	movs	r3, #2
 80024a4:	e0e3      	b.n	800266e <HAL_SPI_Receive+0x21a>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024ae:	f7fe feeb 	bl	8001288 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d002      	beq.n	80024c6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80024c0:	2302      	movs	r3, #2
 80024c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80024c4:	e0ca      	b.n	800265c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d002      	beq.n	80024d2 <HAL_SPI_Receive+0x7e>
 80024cc:	88fb      	ldrh	r3, [r7, #6]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d102      	bne.n	80024d8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80024d6:	e0c1      	b.n	800265c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2204      	movs	r2, #4
 80024dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	68ba      	ldr	r2, [r7, #8]
 80024ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	88fa      	ldrh	r2, [r7, #6]
 80024f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	88fa      	ldrh	r2, [r7, #6]
 80024f6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800251e:	d10f      	bne.n	8002540 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800252e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800253e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800254a:	2b40      	cmp	r3, #64	; 0x40
 800254c:	d007      	beq.n	800255e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800255c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d162      	bne.n	800262c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002566:	e02e      	b.n	80025c6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b01      	cmp	r3, #1
 8002574:	d115      	bne.n	80025a2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f103 020c 	add.w	r2, r3, #12
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002582:	7812      	ldrb	r2, [r2, #0]
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258c:	1c5a      	adds	r2, r3, #1
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002596:	b29b      	uxth	r3, r3
 8002598:	3b01      	subs	r3, #1
 800259a:	b29a      	uxth	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80025a0:	e011      	b.n	80025c6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025a2:	f7fe fe71 	bl	8001288 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d803      	bhi.n	80025ba <HAL_SPI_Receive+0x166>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b8:	d102      	bne.n	80025c0 <HAL_SPI_Receive+0x16c>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d102      	bne.n	80025c6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80025c4:	e04a      	b.n	800265c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1cb      	bne.n	8002568 <HAL_SPI_Receive+0x114>
 80025d0:	e031      	b.n	8002636 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d113      	bne.n	8002608 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ea:	b292      	uxth	r2, r2
 80025ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f2:	1c9a      	adds	r2, r3, #2
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	3b01      	subs	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002606:	e011      	b.n	800262c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002608:	f7fe fe3e 	bl	8001288 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	d803      	bhi.n	8002620 <HAL_SPI_Receive+0x1cc>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261e:	d102      	bne.n	8002626 <HAL_SPI_Receive+0x1d2>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d102      	bne.n	800262c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	75fb      	strb	r3, [r7, #23]
          goto error;
 800262a:	e017      	b.n	800265c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002630:	b29b      	uxth	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1cd      	bne.n	80025d2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	6839      	ldr	r1, [r7, #0]
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 fd98 	bl	8003170 <SPI_EndRxTransaction>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2220      	movs	r2, #32
 800264a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002650:	2b00      	cmp	r3, #0
 8002652:	d002      	beq.n	800265a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	75fb      	strb	r3, [r7, #23]
 8002658:	e000      	b.n	800265c <HAL_SPI_Receive+0x208>
  }

error :
 800265a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800266c:	7dfb      	ldrb	r3, [r7, #23]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b08c      	sub	sp, #48	; 0x30
 800267a:	af00      	add	r7, sp, #0
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	607a      	str	r2, [r7, #4]
 8002682:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002684:	2301      	movs	r3, #1
 8002686:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002688:	2300      	movs	r3, #0
 800268a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <HAL_SPI_TransmitReceive+0x26>
 8002698:	2302      	movs	r3, #2
 800269a:	e18a      	b.n	80029b2 <HAL_SPI_TransmitReceive+0x33c>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026a4:	f7fe fdf0 	bl	8001288 <HAL_GetTick>
 80026a8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80026ba:	887b      	ldrh	r3, [r7, #2]
 80026bc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80026be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d00f      	beq.n	80026e6 <HAL_SPI_TransmitReceive+0x70>
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026cc:	d107      	bne.n	80026de <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d103      	bne.n	80026de <HAL_SPI_TransmitReceive+0x68>
 80026d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d003      	beq.n	80026e6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80026de:	2302      	movs	r3, #2
 80026e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80026e4:	e15b      	b.n	800299e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d005      	beq.n	80026f8 <HAL_SPI_TransmitReceive+0x82>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d002      	beq.n	80026f8 <HAL_SPI_TransmitReceive+0x82>
 80026f2:	887b      	ldrh	r3, [r7, #2]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d103      	bne.n	8002700 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80026fe:	e14e      	b.n	800299e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b04      	cmp	r3, #4
 800270a:	d003      	beq.n	8002714 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2205      	movs	r2, #5
 8002710:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	887a      	ldrh	r2, [r7, #2]
 8002724:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	887a      	ldrh	r2, [r7, #2]
 800272a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	887a      	ldrh	r2, [r7, #2]
 8002736:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	887a      	ldrh	r2, [r7, #2]
 800273c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002754:	2b40      	cmp	r3, #64	; 0x40
 8002756:	d007      	beq.n	8002768 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002766:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002770:	d178      	bne.n	8002864 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d002      	beq.n	8002780 <HAL_SPI_TransmitReceive+0x10a>
 800277a:	8b7b      	ldrh	r3, [r7, #26]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d166      	bne.n	800284e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	881a      	ldrh	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002790:	1c9a      	adds	r2, r3, #2
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800279a:	b29b      	uxth	r3, r3
 800279c:	3b01      	subs	r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027a4:	e053      	b.n	800284e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d11b      	bne.n	80027ec <HAL_SPI_TransmitReceive+0x176>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d016      	beq.n	80027ec <HAL_SPI_TransmitReceive+0x176>
 80027be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d113      	bne.n	80027ec <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c8:	881a      	ldrh	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	1c9a      	adds	r2, r3, #2
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027de:	b29b      	uxth	r3, r3
 80027e0:	3b01      	subs	r3, #1
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d119      	bne.n	800282e <HAL_SPI_TransmitReceive+0x1b8>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d014      	beq.n	800282e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280e:	b292      	uxth	r2, r2
 8002810:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002816:	1c9a      	adds	r2, r3, #2
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002820:	b29b      	uxth	r3, r3
 8002822:	3b01      	subs	r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800282a:	2301      	movs	r3, #1
 800282c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800282e:	f7fe fd2b 	bl	8001288 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800283a:	429a      	cmp	r2, r3
 800283c:	d807      	bhi.n	800284e <HAL_SPI_TransmitReceive+0x1d8>
 800283e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002844:	d003      	beq.n	800284e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800284c:	e0a7      	b.n	800299e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002852:	b29b      	uxth	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1a6      	bne.n	80027a6 <HAL_SPI_TransmitReceive+0x130>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800285c:	b29b      	uxth	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1a1      	bne.n	80027a6 <HAL_SPI_TransmitReceive+0x130>
 8002862:	e07c      	b.n	800295e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d002      	beq.n	8002872 <HAL_SPI_TransmitReceive+0x1fc>
 800286c:	8b7b      	ldrh	r3, [r7, #26]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d16b      	bne.n	800294a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	330c      	adds	r3, #12
 800287c:	7812      	ldrb	r2, [r2, #0]
 800287e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800288e:	b29b      	uxth	r3, r3
 8002890:	3b01      	subs	r3, #1
 8002892:	b29a      	uxth	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002898:	e057      	b.n	800294a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d11c      	bne.n	80028e2 <HAL_SPI_TransmitReceive+0x26c>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d017      	beq.n	80028e2 <HAL_SPI_TransmitReceive+0x26c>
 80028b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d114      	bne.n	80028e2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	330c      	adds	r3, #12
 80028c2:	7812      	ldrb	r2, [r2, #0]
 80028c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	1c5a      	adds	r2, r3, #1
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028de:	2300      	movs	r3, #0
 80028e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d119      	bne.n	8002924 <HAL_SPI_TransmitReceive+0x2ae>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d014      	beq.n	8002924 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68da      	ldr	r2, [r3, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002916:	b29b      	uxth	r3, r3
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002920:	2301      	movs	r3, #1
 8002922:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002924:	f7fe fcb0 	bl	8001288 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002930:	429a      	cmp	r2, r3
 8002932:	d803      	bhi.n	800293c <HAL_SPI_TransmitReceive+0x2c6>
 8002934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293a:	d102      	bne.n	8002942 <HAL_SPI_TransmitReceive+0x2cc>
 800293c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293e:	2b00      	cmp	r3, #0
 8002940:	d103      	bne.n	800294a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002948:	e029      	b.n	800299e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800294e:	b29b      	uxth	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1a2      	bne.n	800289a <HAL_SPI_TransmitReceive+0x224>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002958:	b29b      	uxth	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d19d      	bne.n	800289a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800295e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002960:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 fc56 	bl	8003214 <SPI_EndRxTxTransaction>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d006      	beq.n	800297c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2220      	movs	r2, #32
 8002978:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800297a:	e010      	b.n	800299e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10b      	bne.n	800299c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	e000      	b.n	800299e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800299c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3730      	adds	r7, #48	; 0x30
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	4613      	mov	r3, r2
 80029c8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d110      	bne.n	80029f8 <HAL_SPI_Receive_IT+0x3c>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029de:	d10b      	bne.n	80029f8 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2204      	movs	r2, #4
 80029e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80029e8:	88fb      	ldrh	r3, [r7, #6]
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	68b9      	ldr	r1, [r7, #8]
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 f882 	bl	8002af8 <HAL_SPI_TransmitReceive_IT>
 80029f4:	4603      	mov	r3, r0
 80029f6:	e076      	b.n	8002ae6 <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d101      	bne.n	8002a06 <HAL_SPI_Receive_IT+0x4a>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e06f      	b.n	8002ae6 <HAL_SPI_Receive_IT+0x12a>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d002      	beq.n	8002a20 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a1e:	e05d      	b.n	8002adc <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <HAL_SPI_Receive_IT+0x70>
 8002a26:	88fb      	ldrh	r3, [r7, #6]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d102      	bne.n	8002a32 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a30:	e054      	b.n	8002adc <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2204      	movs	r2, #4
 8002a36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	88fa      	ldrh	r2, [r7, #6]
 8002a4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	88fa      	ldrh	r2, [r7, #6]
 8002a50:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	4a1e      	ldr	r2, [pc, #120]	; (8002af0 <HAL_SPI_Receive_IT+0x134>)
 8002a76:	641a      	str	r2, [r3, #64]	; 0x40
 8002a78:	e002      	b.n	8002a80 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	4a1d      	ldr	r2, [pc, #116]	; (8002af4 <HAL_SPI_Receive_IT+0x138>)
 8002a7e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a88:	d10f      	bne.n	8002aaa <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002aa8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002ab8:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac4:	2b40      	cmp	r3, #64	; 0x40
 8002ac6:	d008      	beq.n	8002ada <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	e000      	b.n	8002adc <HAL_SPI_Receive_IT+0x120>
  }

error :
 8002ada:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	0800301b 	.word	0x0800301b
 8002af4:	08002fd1 	.word	0x08002fd1

08002af8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
 8002b04:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d101      	bne.n	8002b18 <HAL_SPI_TransmitReceive_IT+0x20>
 8002b14:	2302      	movs	r3, #2
 8002b16:	e075      	b.n	8002c04 <HAL_SPI_TransmitReceive_IT+0x10c>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b26:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b2e:	7dbb      	ldrb	r3, [r7, #22]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d00d      	beq.n	8002b50 <HAL_SPI_TransmitReceive_IT+0x58>
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b3a:	d106      	bne.n	8002b4a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d102      	bne.n	8002b4a <HAL_SPI_TransmitReceive_IT+0x52>
 8002b44:	7dbb      	ldrb	r3, [r7, #22]
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d002      	beq.n	8002b50 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b4e:	e054      	b.n	8002bfa <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d005      	beq.n	8002b62 <HAL_SPI_TransmitReceive_IT+0x6a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d002      	beq.n	8002b62 <HAL_SPI_TransmitReceive_IT+0x6a>
 8002b5c:	887b      	ldrh	r3, [r7, #2]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d102      	bne.n	8002b68 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b66:	e048      	b.n	8002bfa <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d003      	beq.n	8002b7c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2205      	movs	r2, #5
 8002b78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	887a      	ldrh	r2, [r7, #2]
 8002b8c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	887a      	ldrh	r2, [r7, #2]
 8002b92:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	887a      	ldrh	r2, [r7, #2]
 8002b9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	887a      	ldrh	r2, [r7, #2]
 8002ba4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d006      	beq.n	8002bbc <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	4a17      	ldr	r2, [pc, #92]	; (8002c10 <HAL_SPI_TransmitReceive_IT+0x118>)
 8002bb2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4a17      	ldr	r2, [pc, #92]	; (8002c14 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8002bb8:	645a      	str	r2, [r3, #68]	; 0x44
 8002bba:	e005      	b.n	8002bc8 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4a16      	ldr	r2, [pc, #88]	; (8002c18 <HAL_SPI_TransmitReceive_IT+0x120>)
 8002bc0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	4a15      	ldr	r2, [pc, #84]	; (8002c1c <HAL_SPI_TransmitReceive_IT+0x124>)
 8002bc6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8002bd6:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be2:	2b40      	cmp	r3, #64	; 0x40
 8002be4:	d008      	beq.n	8002bf8 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	e000      	b.n	8002bfa <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8002bf8:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	371c      	adds	r7, #28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	08002f13 	.word	0x08002f13
 8002c14:	08002f73 	.word	0x08002f73
 8002c18:	08002e4f 	.word	0x08002e4f
 8002c1c:	08002eb3 	.word	0x08002eb3

08002c20 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	099b      	lsrs	r3, r3, #6
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10f      	bne.n	8002c64 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00a      	beq.n	8002c64 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	099b      	lsrs	r3, r3, #6
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d004      	beq.n	8002c64 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	4798      	blx	r3
    return;
 8002c62:	e0bf      	b.n	8002de4 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	085b      	lsrs	r3, r3, #1
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00a      	beq.n	8002c86 <HAL_SPI_IRQHandler+0x66>
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	09db      	lsrs	r3, r3, #7
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d004      	beq.n	8002c86 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	4798      	blx	r3
    return;
 8002c84:	e0ae      	b.n	8002de4 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	095b      	lsrs	r3, r3, #5
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <HAL_SPI_IRQHandler+0x80>
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	099b      	lsrs	r3, r3, #6
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 80a2 	beq.w	8002de4 <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	095b      	lsrs	r3, r3, #5
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 809b 	beq.w	8002de4 <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	099b      	lsrs	r3, r3, #6
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d023      	beq.n	8002d02 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d011      	beq.n	8002cea <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cca:	f043 0204 	orr.w	r2, r3, #4
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	617b      	str	r3, [r7, #20]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	617b      	str	r3, [r7, #20]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	e00b      	b.n	8002d02 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cea:	2300      	movs	r3, #0
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	693b      	ldr	r3, [r7, #16]
        return;
 8002d00:	e070      	b.n	8002de4 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	095b      	lsrs	r3, r3, #5
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d014      	beq.n	8002d38 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d12:	f043 0201 	orr.w	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d050      	beq.n	8002de2 <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d4e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d104      	bne.n	8002d6c <HAL_SPI_IRQHandler+0x14c>
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d034      	beq.n	8002dd6 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0203 	bic.w	r2, r2, #3
 8002d7a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d011      	beq.n	8002da8 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d88:	4a18      	ldr	r2, [pc, #96]	; (8002dec <HAL_SPI_IRQHandler+0x1cc>)
 8002d8a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fe fbb3 	bl	80014fc <HAL_DMA_Abort_IT>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d005      	beq.n	8002da8 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d016      	beq.n	8002dde <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db4:	4a0d      	ldr	r2, [pc, #52]	; (8002dec <HAL_SPI_IRQHandler+0x1cc>)
 8002db6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fe fb9d 	bl	80014fc <HAL_DMA_Abort_IT>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00a      	beq.n	8002dde <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dcc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002dd4:	e003      	b.n	8002dde <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f81c 	bl	8002e14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002ddc:	e000      	b.n	8002de0 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8002dde:	bf00      	nop
    return;
 8002de0:	bf00      	nop
 8002de2:	bf00      	nop
  }
}
 8002de4:	3720      	adds	r7, #32
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	08002e27 	.word	0x08002e27

08002df0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bc80      	pop	{r7}
 8002e00:	4770      	bx	lr

08002e02 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr

08002e14 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc80      	pop	{r7}
 8002e24:	4770      	bx	lr

08002e26 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f7ff ffe7 	bl	8002e14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e46:	bf00      	nop
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b082      	sub	sp, #8
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f103 020c 	add.w	r2, r3, #12
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e62:	7812      	ldrb	r2, [r2, #0]
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10f      	bne.n	8002eaa <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e98:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d102      	bne.n	8002eaa <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f9d3 	bl	8003250 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	330c      	adds	r3, #12
 8002ec4:	7812      	ldrb	r2, [r2, #0]
 8002ec6:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10f      	bne.n	8002f0a <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ef8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d102      	bne.n	8002f0a <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f9a3 	bl	8003250 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f24:	b292      	uxth	r2, r2
 8002f26:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2c:	1c9a      	adds	r2, r3, #2
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10f      	bne.n	8002f6a <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f58:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d102      	bne.n	8002f6a <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f973 	bl	8003250 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002f6a:	bf00      	nop
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b082      	sub	sp, #8
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	881a      	ldrh	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	1c9a      	adds	r2, r3, #2
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	3b01      	subs	r3, #1
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10f      	bne.n	8002fc8 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fb6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d102      	bne.n	8002fc8 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f944 	bl	8003250 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002fc8:	bf00      	nop
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f103 020c 	add.w	r2, r3, #12
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe4:	7812      	ldrb	r2, [r2, #0]
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003006:	b29b      	uxth	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	d102      	bne.n	8003012 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f993 	bl	8003338 <SPI_CloseRx_ISR>
  }
}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b082      	sub	sp, #8
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302c:	b292      	uxth	r2, r2
 800302e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003034:	1c9a      	adds	r2, r3, #2
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800304c:	b29b      	uxth	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d102      	bne.n	8003058 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f970 	bl	8003338 <SPI_CloseRx_ISR>
  }
}
 8003058:	bf00      	nop
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b088      	sub	sp, #32
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	4613      	mov	r3, r2
 800306e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003070:	f7fe f90a 	bl	8001288 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003078:	1a9b      	subs	r3, r3, r2
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	4413      	add	r3, r2
 800307e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003080:	f7fe f902 	bl	8001288 <HAL_GetTick>
 8003084:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003086:	4b39      	ldr	r3, [pc, #228]	; (800316c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	015b      	lsls	r3, r3, #5
 800308c:	0d1b      	lsrs	r3, r3, #20
 800308e:	69fa      	ldr	r2, [r7, #28]
 8003090:	fb02 f303 	mul.w	r3, r2, r3
 8003094:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003096:	e054      	b.n	8003142 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309e:	d050      	beq.n	8003142 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030a0:	f7fe f8f2 	bl	8001288 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	69fa      	ldr	r2, [r7, #28]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d902      	bls.n	80030b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d13d      	bne.n	8003132 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80030c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030ce:	d111      	bne.n	80030f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030d8:	d004      	beq.n	80030e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e2:	d107      	bne.n	80030f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030fc:	d10f      	bne.n	800311e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800311c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e017      	b.n	8003162 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d101      	bne.n	800313c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	3b01      	subs	r3, #1
 8003140:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	4013      	ands	r3, r2
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	429a      	cmp	r2, r3
 8003150:	bf0c      	ite	eq
 8003152:	2301      	moveq	r3, #1
 8003154:	2300      	movne	r3, #0
 8003156:	b2db      	uxtb	r3, r3
 8003158:	461a      	mov	r2, r3
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	429a      	cmp	r2, r3
 800315e:	d19b      	bne.n	8003098 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3720      	adds	r7, #32
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	20000008 	.word	0x20000008

08003170 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af02      	add	r7, sp, #8
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003184:	d111      	bne.n	80031aa <SPI_EndRxTransaction+0x3a>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800318e:	d004      	beq.n	800319a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003198:	d107      	bne.n	80031aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031a8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031b2:	d117      	bne.n	80031e4 <SPI_EndRxTransaction+0x74>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031bc:	d112      	bne.n	80031e4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2200      	movs	r2, #0
 80031c6:	2101      	movs	r1, #1
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f7ff ff49 	bl	8003060 <SPI_WaitFlagStateUntilTimeout>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d01a      	beq.n	800320a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d8:	f043 0220 	orr.w	r2, r3, #32
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e013      	b.n	800320c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2200      	movs	r2, #0
 80031ec:	2180      	movs	r1, #128	; 0x80
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f7ff ff36 	bl	8003060 <SPI_WaitFlagStateUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d007      	beq.n	800320a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fe:	f043 0220 	orr.w	r2, r3, #32
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e000      	b.n	800320c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af02      	add	r7, sp, #8
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2200      	movs	r2, #0
 8003228:	2180      	movs	r1, #128	; 0x80
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f7ff ff18 	bl	8003060 <SPI_WaitFlagStateUntilTimeout>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d007      	beq.n	8003246 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323a:	f043 0220 	orr.w	r2, r3, #32
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e000      	b.n	8003248 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003258:	4b35      	ldr	r3, [pc, #212]	; (8003330 <SPI_CloseRxTx_ISR+0xe0>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a35      	ldr	r2, [pc, #212]	; (8003334 <SPI_CloseRxTx_ISR+0xe4>)
 800325e:	fba2 2303 	umull	r2, r3, r2, r3
 8003262:	0a5b      	lsrs	r3, r3, #9
 8003264:	2264      	movs	r2, #100	; 0x64
 8003266:	fb02 f303 	mul.w	r3, r2, r3
 800326a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800326c:	f7fe f80c 	bl	8001288 <HAL_GetTick>
 8003270:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0220 	bic.w	r2, r2, #32
 8003280:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d106      	bne.n	8003296 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328c:	f043 0220 	orr.w	r2, r3, #32
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003294:	e009      	b.n	80032aa <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	3b01      	subs	r3, #1
 800329a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0eb      	beq.n	8003282 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	2164      	movs	r1, #100	; 0x64
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7ff ffb0 	bl	8003214 <SPI_EndRxTxTransaction>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d005      	beq.n	80032c6 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032be:	f043 0220 	orr.w	r2, r3, #32
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10a      	bne.n	80032e4 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	68fb      	ldr	r3, [r7, #12]
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d115      	bne.n	8003318 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d107      	bne.n	8003308 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f7ff fd75 	bl	8002df0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003306:	e00e      	b.n	8003326 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7ff fd76 	bl	8002e02 <HAL_SPI_TxRxCpltCallback>
}
 8003316:	e006      	b.n	8003326 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7ff fd77 	bl	8002e14 <HAL_SPI_ErrorCallback>
}
 8003326:	bf00      	nop
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	20000008 	.word	0x20000008
 8003334:	057619f1 	.word	0x057619f1

08003338 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800334e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003350:	f7fd ff9a 	bl	8001288 <HAL_GetTick>
 8003354:	4603      	mov	r3, r0
 8003356:	461a      	mov	r2, r3
 8003358:	2164      	movs	r1, #100	; 0x64
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7ff ff08 	bl	8003170 <SPI_EndRxTransaction>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d005      	beq.n	8003372 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336a:	f043 0220 	orr.w	r2, r3, #32
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10a      	bne.n	8003390 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800337a:	2300      	movs	r3, #0
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339c:	2b00      	cmp	r3, #0
 800339e:	d103      	bne.n	80033a8 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f7ff fd25 	bl	8002df0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80033a6:	e002      	b.n	80033ae <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7ff fd33 	bl	8002e14 <HAL_SPI_ErrorCallback>
}
 80033ae:	bf00      	nop
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b082      	sub	sp, #8
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e041      	b.n	800344c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d106      	bne.n	80033e2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7fd fe13 	bl	8001008 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2202      	movs	r2, #2
 80033e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	3304      	adds	r3, #4
 80033f2:	4619      	mov	r1, r3
 80033f4:	4610      	mov	r0, r2
 80033f6:	f000 fc65 	bl	8003cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b01      	cmp	r3, #1
 8003466:	d001      	beq.n	800346c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e032      	b.n	80034d2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a18      	ldr	r2, [pc, #96]	; (80034dc <HAL_TIM_Base_Start+0x88>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00e      	beq.n	800349c <HAL_TIM_Base_Start+0x48>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003486:	d009      	beq.n	800349c <HAL_TIM_Base_Start+0x48>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a14      	ldr	r2, [pc, #80]	; (80034e0 <HAL_TIM_Base_Start+0x8c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d004      	beq.n	800349c <HAL_TIM_Base_Start+0x48>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a13      	ldr	r2, [pc, #76]	; (80034e4 <HAL_TIM_Base_Start+0x90>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d111      	bne.n	80034c0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2b06      	cmp	r3, #6
 80034ac:	d010      	beq.n	80034d0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f042 0201 	orr.w	r2, r2, #1
 80034bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034be:	e007      	b.n	80034d0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0201 	orr.w	r2, r2, #1
 80034ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr
 80034dc:	40012c00 	.word	0x40012c00
 80034e0:	40000400 	.word	0x40000400
 80034e4:	40000800 	.word	0x40000800

080034e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d001      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e03a      	b.n	8003576 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0201 	orr.w	r2, r2, #1
 8003516:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a18      	ldr	r2, [pc, #96]	; (8003580 <HAL_TIM_Base_Start_IT+0x98>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d00e      	beq.n	8003540 <HAL_TIM_Base_Start_IT+0x58>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352a:	d009      	beq.n	8003540 <HAL_TIM_Base_Start_IT+0x58>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a14      	ldr	r2, [pc, #80]	; (8003584 <HAL_TIM_Base_Start_IT+0x9c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d004      	beq.n	8003540 <HAL_TIM_Base_Start_IT+0x58>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a13      	ldr	r2, [pc, #76]	; (8003588 <HAL_TIM_Base_Start_IT+0xa0>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d111      	bne.n	8003564 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2b06      	cmp	r3, #6
 8003550:	d010      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f042 0201 	orr.w	r2, r2, #1
 8003560:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003562:	e007      	b.n	8003574 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0201 	orr.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr
 8003580:	40012c00 	.word	0x40012c00
 8003584:	40000400 	.word	0x40000400
 8003588:	40000800 	.word	0x40000800

0800358c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e041      	b.n	8003622 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f839 	bl	800362a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3304      	adds	r3, #4
 80035c8:	4619      	mov	r1, r3
 80035ca:	4610      	mov	r0, r2
 80035cc:	f000 fb7a 	bl	8003cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr

0800363c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d109      	bne.n	8003660 <HAL_TIM_PWM_Start+0x24>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b01      	cmp	r3, #1
 8003656:	bf14      	ite	ne
 8003658:	2301      	movne	r3, #1
 800365a:	2300      	moveq	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	e022      	b.n	80036a6 <HAL_TIM_PWM_Start+0x6a>
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	2b04      	cmp	r3, #4
 8003664:	d109      	bne.n	800367a <HAL_TIM_PWM_Start+0x3e>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b01      	cmp	r3, #1
 8003670:	bf14      	ite	ne
 8003672:	2301      	movne	r3, #1
 8003674:	2300      	moveq	r3, #0
 8003676:	b2db      	uxtb	r3, r3
 8003678:	e015      	b.n	80036a6 <HAL_TIM_PWM_Start+0x6a>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2b08      	cmp	r3, #8
 800367e:	d109      	bne.n	8003694 <HAL_TIM_PWM_Start+0x58>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b01      	cmp	r3, #1
 800368a:	bf14      	ite	ne
 800368c:	2301      	movne	r3, #1
 800368e:	2300      	moveq	r3, #0
 8003690:	b2db      	uxtb	r3, r3
 8003692:	e008      	b.n	80036a6 <HAL_TIM_PWM_Start+0x6a>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b01      	cmp	r3, #1
 800369e:	bf14      	ite	ne
 80036a0:	2301      	movne	r3, #1
 80036a2:	2300      	moveq	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e05e      	b.n	800376c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d104      	bne.n	80036be <HAL_TIM_PWM_Start+0x82>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036bc:	e013      	b.n	80036e6 <HAL_TIM_PWM_Start+0xaa>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d104      	bne.n	80036ce <HAL_TIM_PWM_Start+0x92>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036cc:	e00b      	b.n	80036e6 <HAL_TIM_PWM_Start+0xaa>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d104      	bne.n	80036de <HAL_TIM_PWM_Start+0xa2>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036dc:	e003      	b.n	80036e6 <HAL_TIM_PWM_Start+0xaa>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2202      	movs	r2, #2
 80036e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2201      	movs	r2, #1
 80036ec:	6839      	ldr	r1, [r7, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 fd68 	bl	80041c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a1e      	ldr	r2, [pc, #120]	; (8003774 <HAL_TIM_PWM_Start+0x138>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d107      	bne.n	800370e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800370c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a18      	ldr	r2, [pc, #96]	; (8003774 <HAL_TIM_PWM_Start+0x138>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d00e      	beq.n	8003736 <HAL_TIM_PWM_Start+0xfa>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003720:	d009      	beq.n	8003736 <HAL_TIM_PWM_Start+0xfa>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a14      	ldr	r2, [pc, #80]	; (8003778 <HAL_TIM_PWM_Start+0x13c>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d004      	beq.n	8003736 <HAL_TIM_PWM_Start+0xfa>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a12      	ldr	r2, [pc, #72]	; (800377c <HAL_TIM_PWM_Start+0x140>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d111      	bne.n	800375a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2b06      	cmp	r3, #6
 8003746:	d010      	beq.n	800376a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0201 	orr.w	r2, r2, #1
 8003756:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003758:	e007      	b.n	800376a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f042 0201 	orr.w	r2, r2, #1
 8003768:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40012c00 	.word	0x40012c00
 8003778:	40000400 	.word	0x40000400
 800377c:	40000800 	.word	0x40000800

08003780 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b02      	cmp	r3, #2
 8003794:	d122      	bne.n	80037dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d11b      	bne.n	80037dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f06f 0202 	mvn.w	r2, #2
 80037ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fa62 	bl	8003c8c <HAL_TIM_IC_CaptureCallback>
 80037c8:	e005      	b.n	80037d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 fa55 	bl	8003c7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 fa64 	bl	8003c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d122      	bne.n	8003830 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d11b      	bne.n	8003830 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f06f 0204 	mvn.w	r2, #4
 8003800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2202      	movs	r2, #2
 8003806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 fa38 	bl	8003c8c <HAL_TIM_IC_CaptureCallback>
 800381c:	e005      	b.n	800382a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 fa2b 	bl	8003c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 fa3a 	bl	8003c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b08      	cmp	r3, #8
 800383c:	d122      	bne.n	8003884 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f003 0308 	and.w	r3, r3, #8
 8003848:	2b08      	cmp	r3, #8
 800384a:	d11b      	bne.n	8003884 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f06f 0208 	mvn.w	r2, #8
 8003854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2204      	movs	r2, #4
 800385a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fa0e 	bl	8003c8c <HAL_TIM_IC_CaptureCallback>
 8003870:	e005      	b.n	800387e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fa01 	bl	8003c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 fa10 	bl	8003c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f003 0310 	and.w	r3, r3, #16
 800388e:	2b10      	cmp	r3, #16
 8003890:	d122      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	2b10      	cmp	r3, #16
 800389e:	d11b      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0210 	mvn.w	r2, #16
 80038a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2208      	movs	r2, #8
 80038ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f9e4 	bl	8003c8c <HAL_TIM_IC_CaptureCallback>
 80038c4:	e005      	b.n	80038d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f9d7 	bl	8003c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f9e6 	bl	8003c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d10e      	bne.n	8003904 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d107      	bne.n	8003904 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f06f 0201 	mvn.w	r2, #1
 80038fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7fc ff20 	bl	8000744 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390e:	2b80      	cmp	r3, #128	; 0x80
 8003910:	d10e      	bne.n	8003930 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391c:	2b80      	cmp	r3, #128	; 0x80
 800391e:	d107      	bne.n	8003930 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 fd26 	bl	800437c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393a:	2b40      	cmp	r3, #64	; 0x40
 800393c:	d10e      	bne.n	800395c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003948:	2b40      	cmp	r3, #64	; 0x40
 800394a:	d107      	bne.n	800395c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f9aa 	bl	8003cb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	f003 0320 	and.w	r3, r3, #32
 8003966:	2b20      	cmp	r3, #32
 8003968:	d10e      	bne.n	8003988 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f003 0320 	and.w	r3, r3, #32
 8003974:	2b20      	cmp	r3, #32
 8003976:	d107      	bne.n	8003988 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f06f 0220 	mvn.w	r2, #32
 8003980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 fcf1 	bl	800436a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003988:	bf00      	nop
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80039a6:	2302      	movs	r3, #2
 80039a8:	e0ac      	b.n	8003b04 <HAL_TIM_PWM_ConfigChannel+0x174>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b0c      	cmp	r3, #12
 80039b6:	f200 809f 	bhi.w	8003af8 <HAL_TIM_PWM_ConfigChannel+0x168>
 80039ba:	a201      	add	r2, pc, #4	; (adr r2, 80039c0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80039bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c0:	080039f5 	.word	0x080039f5
 80039c4:	08003af9 	.word	0x08003af9
 80039c8:	08003af9 	.word	0x08003af9
 80039cc:	08003af9 	.word	0x08003af9
 80039d0:	08003a35 	.word	0x08003a35
 80039d4:	08003af9 	.word	0x08003af9
 80039d8:	08003af9 	.word	0x08003af9
 80039dc:	08003af9 	.word	0x08003af9
 80039e0:	08003a77 	.word	0x08003a77
 80039e4:	08003af9 	.word	0x08003af9
 80039e8:	08003af9 	.word	0x08003af9
 80039ec:	08003af9 	.word	0x08003af9
 80039f0:	08003ab7 	.word	0x08003ab7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68b9      	ldr	r1, [r7, #8]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 f9c4 	bl	8003d88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699a      	ldr	r2, [r3, #24]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0208 	orr.w	r2, r2, #8
 8003a0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699a      	ldr	r2, [r3, #24]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0204 	bic.w	r2, r2, #4
 8003a1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6999      	ldr	r1, [r3, #24]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	691a      	ldr	r2, [r3, #16]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	619a      	str	r2, [r3, #24]
      break;
 8003a32:	e062      	b.n	8003afa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68b9      	ldr	r1, [r7, #8]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 fa0a 	bl	8003e54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699a      	ldr	r2, [r3, #24]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699a      	ldr	r2, [r3, #24]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6999      	ldr	r1, [r3, #24]
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	021a      	lsls	r2, r3, #8
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	619a      	str	r2, [r3, #24]
      break;
 8003a74:	e041      	b.n	8003afa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68b9      	ldr	r1, [r7, #8]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 fa53 	bl	8003f28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	69da      	ldr	r2, [r3, #28]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f042 0208 	orr.w	r2, r2, #8
 8003a90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	69da      	ldr	r2, [r3, #28]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0204 	bic.w	r2, r2, #4
 8003aa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69d9      	ldr	r1, [r3, #28]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	61da      	str	r2, [r3, #28]
      break;
 8003ab4:	e021      	b.n	8003afa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68b9      	ldr	r1, [r7, #8]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 fa9d 	bl	8003ffc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69da      	ldr	r2, [r3, #28]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ad0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	69da      	ldr	r2, [r3, #28]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69d9      	ldr	r1, [r3, #28]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	021a      	lsls	r2, r3, #8
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	61da      	str	r2, [r3, #28]
      break;
 8003af6:	e000      	b.n	8003afa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003af8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_TIM_ConfigClockSource+0x18>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e0a6      	b.n	8003c72 <HAL_TIM_ConfigClockSource+0x166>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b4a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b40      	cmp	r3, #64	; 0x40
 8003b5a:	d067      	beq.n	8003c2c <HAL_TIM_ConfigClockSource+0x120>
 8003b5c:	2b40      	cmp	r3, #64	; 0x40
 8003b5e:	d80b      	bhi.n	8003b78 <HAL_TIM_ConfigClockSource+0x6c>
 8003b60:	2b10      	cmp	r3, #16
 8003b62:	d073      	beq.n	8003c4c <HAL_TIM_ConfigClockSource+0x140>
 8003b64:	2b10      	cmp	r3, #16
 8003b66:	d802      	bhi.n	8003b6e <HAL_TIM_ConfigClockSource+0x62>
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d06f      	beq.n	8003c4c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003b6c:	e078      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b6e:	2b20      	cmp	r3, #32
 8003b70:	d06c      	beq.n	8003c4c <HAL_TIM_ConfigClockSource+0x140>
 8003b72:	2b30      	cmp	r3, #48	; 0x30
 8003b74:	d06a      	beq.n	8003c4c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003b76:	e073      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b78:	2b70      	cmp	r3, #112	; 0x70
 8003b7a:	d00d      	beq.n	8003b98 <HAL_TIM_ConfigClockSource+0x8c>
 8003b7c:	2b70      	cmp	r3, #112	; 0x70
 8003b7e:	d804      	bhi.n	8003b8a <HAL_TIM_ConfigClockSource+0x7e>
 8003b80:	2b50      	cmp	r3, #80	; 0x50
 8003b82:	d033      	beq.n	8003bec <HAL_TIM_ConfigClockSource+0xe0>
 8003b84:	2b60      	cmp	r3, #96	; 0x60
 8003b86:	d041      	beq.n	8003c0c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003b88:	e06a      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b8e:	d066      	beq.n	8003c5e <HAL_TIM_ConfigClockSource+0x152>
 8003b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b94:	d017      	beq.n	8003bc6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003b96:	e063      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6818      	ldr	r0, [r3, #0]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	6899      	ldr	r1, [r3, #8]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f000 faed 	bl	8004186 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	609a      	str	r2, [r3, #8]
      break;
 8003bc4:	e04c      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6818      	ldr	r0, [r3, #0]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	6899      	ldr	r1, [r3, #8]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f000 fad6 	bl	8004186 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003be8:	609a      	str	r2, [r3, #8]
      break;
 8003bea:	e039      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6818      	ldr	r0, [r3, #0]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	6859      	ldr	r1, [r3, #4]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	f000 fa4d 	bl	8004098 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2150      	movs	r1, #80	; 0x50
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 faa4 	bl	8004152 <TIM_ITRx_SetConfig>
      break;
 8003c0a:	e029      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6818      	ldr	r0, [r3, #0]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	6859      	ldr	r1, [r3, #4]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	f000 fa6b 	bl	80040f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2160      	movs	r1, #96	; 0x60
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 fa94 	bl	8004152 <TIM_ITRx_SetConfig>
      break;
 8003c2a:	e019      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6818      	ldr	r0, [r3, #0]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	6859      	ldr	r1, [r3, #4]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	f000 fa2d 	bl	8004098 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2140      	movs	r1, #64	; 0x40
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 fa84 	bl	8004152 <TIM_ITRx_SetConfig>
      break;
 8003c4a:	e009      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4619      	mov	r1, r3
 8003c56:	4610      	mov	r0, r2
 8003c58:	f000 fa7b 	bl	8004152 <TIM_ITRx_SetConfig>
        break;
 8003c5c:	e000      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003c5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr

08003c8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bc80      	pop	{r7}
 8003c9c:	4770      	bx	lr

08003c9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bc80      	pop	{r7}
 8003cae:	4770      	bx	lr

08003cb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bc80      	pop	{r7}
 8003cc0:	4770      	bx	lr
	...

08003cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a29      	ldr	r2, [pc, #164]	; (8003d7c <TIM_Base_SetConfig+0xb8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d00b      	beq.n	8003cf4 <TIM_Base_SetConfig+0x30>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce2:	d007      	beq.n	8003cf4 <TIM_Base_SetConfig+0x30>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a26      	ldr	r2, [pc, #152]	; (8003d80 <TIM_Base_SetConfig+0xbc>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d003      	beq.n	8003cf4 <TIM_Base_SetConfig+0x30>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a25      	ldr	r2, [pc, #148]	; (8003d84 <TIM_Base_SetConfig+0xc0>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d108      	bne.n	8003d06 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a1c      	ldr	r2, [pc, #112]	; (8003d7c <TIM_Base_SetConfig+0xb8>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d00b      	beq.n	8003d26 <TIM_Base_SetConfig+0x62>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d14:	d007      	beq.n	8003d26 <TIM_Base_SetConfig+0x62>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a19      	ldr	r2, [pc, #100]	; (8003d80 <TIM_Base_SetConfig+0xbc>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d003      	beq.n	8003d26 <TIM_Base_SetConfig+0x62>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a18      	ldr	r2, [pc, #96]	; (8003d84 <TIM_Base_SetConfig+0xc0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d108      	bne.n	8003d38 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a07      	ldr	r2, [pc, #28]	; (8003d7c <TIM_Base_SetConfig+0xb8>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d103      	bne.n	8003d6c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	691a      	ldr	r2, [r3, #16]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	615a      	str	r2, [r3, #20]
}
 8003d72:	bf00      	nop
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bc80      	pop	{r7}
 8003d7a:	4770      	bx	lr
 8003d7c:	40012c00 	.word	0x40012c00
 8003d80:	40000400 	.word	0x40000400
 8003d84:	40000800 	.word	0x40000800

08003d88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	f023 0201 	bic.w	r2, r3, #1
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f023 0303 	bic.w	r3, r3, #3
 8003dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f023 0302 	bic.w	r3, r3, #2
 8003dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a1c      	ldr	r2, [pc, #112]	; (8003e50 <TIM_OC1_SetConfig+0xc8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d10c      	bne.n	8003dfe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f023 0308 	bic.w	r3, r3, #8
 8003dea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f023 0304 	bic.w	r3, r3, #4
 8003dfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a13      	ldr	r2, [pc, #76]	; (8003e50 <TIM_OC1_SetConfig+0xc8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d111      	bne.n	8003e2a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	621a      	str	r2, [r3, #32]
}
 8003e44:	bf00      	nop
 8003e46:	371c      	adds	r7, #28
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bc80      	pop	{r7}
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	40012c00 	.word	0x40012c00

08003e54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b087      	sub	sp, #28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	f023 0210 	bic.w	r2, r3, #16
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	021b      	lsls	r3, r3, #8
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f023 0320 	bic.w	r3, r3, #32
 8003e9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	011b      	lsls	r3, r3, #4
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a1d      	ldr	r2, [pc, #116]	; (8003f24 <TIM_OC2_SetConfig+0xd0>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d10d      	bne.n	8003ed0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ece:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a14      	ldr	r2, [pc, #80]	; (8003f24 <TIM_OC2_SetConfig+0xd0>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d113      	bne.n	8003f00 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ede:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	621a      	str	r2, [r3, #32]
}
 8003f1a:	bf00      	nop
 8003f1c:	371c      	adds	r7, #28
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc80      	pop	{r7}
 8003f22:	4770      	bx	lr
 8003f24:	40012c00 	.word	0x40012c00

08003f28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b087      	sub	sp, #28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0303 	bic.w	r3, r3, #3
 8003f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	021b      	lsls	r3, r3, #8
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a1d      	ldr	r2, [pc, #116]	; (8003ff8 <TIM_OC3_SetConfig+0xd0>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d10d      	bne.n	8003fa2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	021b      	lsls	r3, r3, #8
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a14      	ldr	r2, [pc, #80]	; (8003ff8 <TIM_OC3_SetConfig+0xd0>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d113      	bne.n	8003fd2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	011b      	lsls	r3, r3, #4
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	621a      	str	r2, [r3, #32]
}
 8003fec:	bf00      	nop
 8003fee:	371c      	adds	r7, #28
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bc80      	pop	{r7}
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	40012c00 	.word	0x40012c00

08003ffc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800402a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	021b      	lsls	r3, r3, #8
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	4313      	orrs	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004046:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	031b      	lsls	r3, r3, #12
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	4313      	orrs	r3, r2
 8004052:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a0f      	ldr	r2, [pc, #60]	; (8004094 <TIM_OC4_SetConfig+0x98>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d109      	bne.n	8004070 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004062:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	019b      	lsls	r3, r3, #6
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	4313      	orrs	r3, r2
 800406e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	621a      	str	r2, [r3, #32]
}
 800408a:	bf00      	nop
 800408c:	371c      	adds	r7, #28
 800408e:	46bd      	mov	sp, r7
 8004090:	bc80      	pop	{r7}
 8004092:	4770      	bx	lr
 8004094:	40012c00 	.word	0x40012c00

08004098 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004098:	b480      	push	{r7}
 800409a:	b087      	sub	sp, #28
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	f023 0201 	bic.w	r2, r3, #1
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	011b      	lsls	r3, r3, #4
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f023 030a 	bic.w	r3, r3, #10
 80040d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	4313      	orrs	r3, r2
 80040dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	621a      	str	r2, [r3, #32]
}
 80040ea:	bf00      	nop
 80040ec:	371c      	adds	r7, #28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr

080040f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	f023 0210 	bic.w	r2, r3, #16
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800411e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	031b      	lsls	r3, r3, #12
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	4313      	orrs	r3, r2
 8004128:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004130:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	011b      	lsls	r3, r3, #4
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	4313      	orrs	r3, r2
 800413a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	621a      	str	r2, [r3, #32]
}
 8004148:	bf00      	nop
 800414a:	371c      	adds	r7, #28
 800414c:	46bd      	mov	sp, r7
 800414e:	bc80      	pop	{r7}
 8004150:	4770      	bx	lr

08004152 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004152:	b480      	push	{r7}
 8004154:	b085      	sub	sp, #20
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
 800415a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004168:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4313      	orrs	r3, r2
 8004170:	f043 0307 	orr.w	r3, r3, #7
 8004174:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	609a      	str	r2, [r3, #8]
}
 800417c:	bf00      	nop
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	bc80      	pop	{r7}
 8004184:	4770      	bx	lr

08004186 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004186:	b480      	push	{r7}
 8004188:	b087      	sub	sp, #28
 800418a:	af00      	add	r7, sp, #0
 800418c:	60f8      	str	r0, [r7, #12]
 800418e:	60b9      	str	r1, [r7, #8]
 8004190:	607a      	str	r2, [r7, #4]
 8004192:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	021a      	lsls	r2, r3, #8
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	431a      	orrs	r2, r3
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	609a      	str	r2, [r3, #8]
}
 80041ba:	bf00      	nop
 80041bc:	371c      	adds	r7, #28
 80041be:	46bd      	mov	sp, r7
 80041c0:	bc80      	pop	{r7}
 80041c2:	4770      	bx	lr

080041c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f003 031f 	and.w	r3, r3, #31
 80041d6:	2201      	movs	r2, #1
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6a1a      	ldr	r2, [r3, #32]
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	43db      	mvns	r3, r3
 80041e6:	401a      	ands	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a1a      	ldr	r2, [r3, #32]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f003 031f 	and.w	r3, r3, #31
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	fa01 f303 	lsl.w	r3, r1, r3
 80041fc:	431a      	orrs	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	621a      	str	r2, [r3, #32]
}
 8004202:	bf00      	nop
 8004204:	371c      	adds	r7, #28
 8004206:	46bd      	mov	sp, r7
 8004208:	bc80      	pop	{r7}
 800420a:	4770      	bx	lr

0800420c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004220:	2302      	movs	r3, #2
 8004222:	e046      	b.n	80042b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	4313      	orrs	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a16      	ldr	r2, [pc, #88]	; (80042bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d00e      	beq.n	8004286 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004270:	d009      	beq.n	8004286 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a12      	ldr	r2, [pc, #72]	; (80042c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d004      	beq.n	8004286 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a10      	ldr	r2, [pc, #64]	; (80042c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d10c      	bne.n	80042a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800428c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	4313      	orrs	r3, r2
 8004296:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bc80      	pop	{r7}
 80042ba:	4770      	bx	lr
 80042bc:	40012c00 	.word	0x40012c00
 80042c0:	40000400 	.word	0x40000400
 80042c4:	40000800 	.word	0x40000800

080042c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d101      	bne.n	80042e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80042e0:	2302      	movs	r3, #2
 80042e2:	e03d      	b.n	8004360 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	4313      	orrs	r3, r2
 8004306:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4313      	orrs	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	4313      	orrs	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	4313      	orrs	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	4313      	orrs	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3714      	adds	r7, #20
 8004364:	46bd      	mov	sp, r7
 8004366:	bc80      	pop	{r7}
 8004368:	4770      	bx	lr

0800436a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004372:	bf00      	nop
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr

0800437c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	bc80      	pop	{r7}
 800438c:	4770      	bx	lr
	...

08004390 <__libc_init_array>:
 8004390:	b570      	push	{r4, r5, r6, lr}
 8004392:	2500      	movs	r5, #0
 8004394:	4e0c      	ldr	r6, [pc, #48]	; (80043c8 <__libc_init_array+0x38>)
 8004396:	4c0d      	ldr	r4, [pc, #52]	; (80043cc <__libc_init_array+0x3c>)
 8004398:	1ba4      	subs	r4, r4, r6
 800439a:	10a4      	asrs	r4, r4, #2
 800439c:	42a5      	cmp	r5, r4
 800439e:	d109      	bne.n	80043b4 <__libc_init_array+0x24>
 80043a0:	f000 f822 	bl	80043e8 <_init>
 80043a4:	2500      	movs	r5, #0
 80043a6:	4e0a      	ldr	r6, [pc, #40]	; (80043d0 <__libc_init_array+0x40>)
 80043a8:	4c0a      	ldr	r4, [pc, #40]	; (80043d4 <__libc_init_array+0x44>)
 80043aa:	1ba4      	subs	r4, r4, r6
 80043ac:	10a4      	asrs	r4, r4, #2
 80043ae:	42a5      	cmp	r5, r4
 80043b0:	d105      	bne.n	80043be <__libc_init_array+0x2e>
 80043b2:	bd70      	pop	{r4, r5, r6, pc}
 80043b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043b8:	4798      	blx	r3
 80043ba:	3501      	adds	r5, #1
 80043bc:	e7ee      	b.n	800439c <__libc_init_array+0xc>
 80043be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043c2:	4798      	blx	r3
 80043c4:	3501      	adds	r5, #1
 80043c6:	e7f2      	b.n	80043ae <__libc_init_array+0x1e>
 80043c8:	0800443c 	.word	0x0800443c
 80043cc:	0800443c 	.word	0x0800443c
 80043d0:	0800443c 	.word	0x0800443c
 80043d4:	08004440 	.word	0x08004440

080043d8 <memset>:
 80043d8:	4603      	mov	r3, r0
 80043da:	4402      	add	r2, r0
 80043dc:	4293      	cmp	r3, r2
 80043de:	d100      	bne.n	80043e2 <memset+0xa>
 80043e0:	4770      	bx	lr
 80043e2:	f803 1b01 	strb.w	r1, [r3], #1
 80043e6:	e7f9      	b.n	80043dc <memset+0x4>

080043e8 <_init>:
 80043e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ea:	bf00      	nop
 80043ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ee:	bc08      	pop	{r3}
 80043f0:	469e      	mov	lr, r3
 80043f2:	4770      	bx	lr

080043f4 <_fini>:
 80043f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f6:	bf00      	nop
 80043f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043fa:	bc08      	pop	{r3}
 80043fc:	469e      	mov	lr, r3
 80043fe:	4770      	bx	lr
